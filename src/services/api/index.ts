/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Book API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
    Appointment,
    Department,
    Diagnosis,
    Doctor,
    DoctorRegistration,
    DoctorSchedule,
    EmergencyContact,
    Invoice,
    LoginModel,
    Patient,
    PatientRegistration,
    WeatherForecast,
} from '../../types';

export const postApiAccountLogin = (
    loginModel: LoginModel,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.post(`/api/Account/Login`, loginModel, options);
};

export const getPostApiAccountLoginMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiAccountLogin>>,
        TError,
        { data: LoginModel },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountLogin>>, TError, { data: LoginModel }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountLogin>>, { data: LoginModel }> = (
        props
    ) => {
        const { data } = props ?? {};

        return postApiAccountLogin(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiAccountLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountLogin>>>;
export type PostApiAccountLoginMutationBody = LoginModel;
export type PostApiAccountLoginMutationError = AxiosError<unknown>;

export const usePostApiAccountLogin = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiAccountLogin>>,
        TError,
        { data: LoginModel },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postApiAccountLogin>>, TError, { data: LoginModel }, TContext> => {
    const mutationOptions = getPostApiAccountLoginMutationOptions(options);

    return useMutation(mutationOptions);
};

export const postApiAccountLogout = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.post(`/api/Account/Logout`, undefined, options);
};

export const getPostApiAccountLogoutMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiAccountLogout>>, TError, void, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountLogout>>, TError, void, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountLogout>>, void> = () => {
        return postApiAccountLogout(axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiAccountLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountLogout>>>;

export type PostApiAccountLogoutMutationError = AxiosError<unknown>;

export const usePostApiAccountLogout = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiAccountLogout>>, TError, void, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postApiAccountLogout>>, TError, void, TContext> => {
    const mutationOptions = getPostApiAccountLogoutMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiAppointments = (options?: AxiosRequestConfig): Promise<AxiosResponse<Appointment[]>> => {
    return axios.default.get(`/api/Appointments`, options);
};

export const getGetApiAppointmentsQueryKey = () => {
    return [`/api/Appointments`] as const;
};

export const getGetApiAppointmentsQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiAppointments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointments>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiAppointmentsQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAppointments>>> = ({ signal }) =>
        getApiAppointments({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiAppointments>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiAppointmentsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAppointments>>>;
export type GetApiAppointmentsQueryError = AxiosError<unknown>;

export function useGetApiAppointments<
    TData = Awaited<ReturnType<typeof getApiAppointments>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointments>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAppointments>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiAppointments<
    TData = Awaited<ReturnType<typeof getApiAppointments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointments>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAppointments>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiAppointments<
    TData = Awaited<ReturnType<typeof getApiAppointments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointments>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiAppointments<
    TData = Awaited<ReturnType<typeof getApiAppointments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointments>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiAppointmentsQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postApiAppointments = (
    appointment: Appointment,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Appointment>> => {
    return axios.default.post(`/api/Appointments`, appointment, options);
};

export const getPostApiAppointmentsMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiAppointments>>,
        TError,
        { data: Appointment },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postApiAppointments>>, TError, { data: Appointment }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAppointments>>, { data: Appointment }> = (
        props
    ) => {
        const { data } = props ?? {};

        return postApiAppointments(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiAppointmentsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAppointments>>>;
export type PostApiAppointmentsMutationBody = Appointment;
export type PostApiAppointmentsMutationError = AxiosError<unknown>;

export const usePostApiAppointments = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiAppointments>>,
        TError,
        { data: Appointment },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postApiAppointments>>, TError, { data: Appointment }, TContext> => {
    const mutationOptions = getPostApiAppointmentsMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiAppointmentsId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Appointment>> => {
    return axios.default.get(`/api/Appointments/${id}`, options);
};

export const getGetApiAppointmentsIdQueryKey = (id: number) => {
    return [`/api/Appointments/${id}`] as const;
};

export const getGetApiAppointmentsIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiAppointmentsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiAppointmentsIdQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAppointmentsId>>> = ({ signal }) =>
        getApiAppointmentsId(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiAppointmentsId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiAppointmentsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAppointmentsId>>>;
export type GetApiAppointmentsIdQueryError = AxiosError<unknown>;

export function useGetApiAppointmentsId<
    TData = Awaited<ReturnType<typeof getApiAppointmentsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentsId>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAppointmentsId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiAppointmentsId<
    TData = Awaited<ReturnType<typeof getApiAppointmentsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentsId>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAppointmentsId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiAppointmentsId<
    TData = Awaited<ReturnType<typeof getApiAppointmentsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiAppointmentsId<
    TData = Awaited<ReturnType<typeof getApiAppointmentsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiAppointmentsIdQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putApiAppointmentsId = (
    id: number,
    appointment: Appointment,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Appointments/${id}`, appointment, options);
};

export const getPutApiAppointmentsIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiAppointmentsId>>,
        TError,
        { id: number; data: Appointment },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putApiAppointmentsId>>,
    TError,
    { id: number; data: Appointment },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putApiAppointmentsId>>,
        { id: number; data: Appointment }
    > = (props) => {
        const { id, data } = props ?? {};

        return putApiAppointmentsId(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutApiAppointmentsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiAppointmentsId>>>;
export type PutApiAppointmentsIdMutationBody = Appointment;
export type PutApiAppointmentsIdMutationError = AxiosError<unknown>;

export const usePutApiAppointmentsId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiAppointmentsId>>,
        TError,
        { id: number; data: Appointment },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putApiAppointmentsId>>,
    TError,
    { id: number; data: Appointment },
    TContext
> => {
    const mutationOptions = getPutApiAppointmentsIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteApiAppointmentsId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Appointments/${id}`, options);
};

export const getDeleteApiAppointmentsIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiAppointmentsId>>,
        TError,
        { id: number },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAppointmentsId>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAppointmentsId>>, { id: number }> = (
        props
    ) => {
        const { id } = props ?? {};

        return deleteApiAppointmentsId(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiAppointmentsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAppointmentsId>>>;

export type DeleteApiAppointmentsIdMutationError = AxiosError<unknown>;

export const useDeleteApiAppointmentsId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiAppointmentsId>>,
        TError,
        { id: number },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiAppointmentsId>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteApiAppointmentsIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiAppointmentsDoctorDoctorIdDateAppointmentDate = (
    doctorId: number,
    appointmentDate: string,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Appointment[]>> => {
    return axios.default.get(`/api/Appointments/doctor/${doctorId}/date/${appointmentDate}`, options);
};

export const getGetApiAppointmentsDoctorDoctorIdDateAppointmentDateQueryKey = (
    doctorId: number,
    appointmentDate: string
) => {
    return [`/api/Appointments/doctor/${doctorId}/date/${appointmentDate}`] as const;
};

export const getGetApiAppointmentsDoctorDoctorIdDateAppointmentDateQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetApiAppointmentsDoctorDoctorIdDateAppointmentDateQueryKey(doctorId, appointmentDate);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>> = ({
        signal,
    }) => getApiAppointmentsDoctorDoctorIdDateAppointmentDate(doctorId, appointmentDate, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!(doctorId && appointmentDate), ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiAppointmentsDoctorDoctorIdDateAppointmentDateQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>
>;
export type GetApiAppointmentsDoctorDoctorIdDateAppointmentDateQueryError = AxiosError<unknown>;

export function useGetApiAppointmentsDoctorDoctorIdDateAppointmentDate<
    TData = Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiAppointmentsDoctorDoctorIdDateAppointmentDate<
    TData = Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiAppointmentsDoctorDoctorIdDateAppointmentDate<
    TData = Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiAppointmentsDoctorDoctorIdDateAppointmentDate<
    TData = Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiAppointmentsDoctorDoctorIdDateAppointmentDate>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiAppointmentsDoctorDoctorIdDateAppointmentDateQueryOptions(
        doctorId,
        appointmentDate,
        options
    );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getApiDepartments = (options?: AxiosRequestConfig): Promise<AxiosResponse<Department[]>> => {
    return axios.default.get(`/api/Departments`, options);
};

export const getGetApiDepartmentsQueryKey = () => {
    return [`/api/Departments`] as const;
};

export const getGetApiDepartmentsQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiDepartments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDepartments>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiDepartmentsQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDepartments>>> = ({ signal }) =>
        getApiDepartments({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiDepartments>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiDepartmentsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDepartments>>>;
export type GetApiDepartmentsQueryError = AxiosError<unknown>;

export function useGetApiDepartments<
    TData = Awaited<ReturnType<typeof getApiDepartments>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDepartments>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDepartments>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDepartments<
    TData = Awaited<ReturnType<typeof getApiDepartments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDepartments>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDepartments>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDepartments<
    TData = Awaited<ReturnType<typeof getApiDepartments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDepartments>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiDepartments<
    TData = Awaited<ReturnType<typeof getApiDepartments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDepartments>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiDepartmentsQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postApiDepartments = (
    department: Department,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Department>> => {
    return axios.default.post(`/api/Departments`, department, options);
};

export const getPostApiDepartmentsMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiDepartments>>,
        TError,
        { data: Department },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postApiDepartments>>, TError, { data: Department }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiDepartments>>, { data: Department }> = (
        props
    ) => {
        const { data } = props ?? {};

        return postApiDepartments(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiDepartmentsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiDepartments>>>;
export type PostApiDepartmentsMutationBody = Department;
export type PostApiDepartmentsMutationError = AxiosError<unknown>;

export const usePostApiDepartments = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiDepartments>>,
        TError,
        { data: Department },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postApiDepartments>>, TError, { data: Department }, TContext> => {
    const mutationOptions = getPostApiDepartmentsMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiDepartmentsId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Department>> => {
    return axios.default.get(`/api/Departments/${id}`, options);
};

export const getGetApiDepartmentsIdQueryKey = (id: number) => {
    return [`/api/Departments/${id}`] as const;
};

export const getGetApiDepartmentsIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiDepartmentsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDepartmentsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiDepartmentsIdQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDepartmentsId>>> = ({ signal }) =>
        getApiDepartmentsId(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiDepartmentsId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiDepartmentsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDepartmentsId>>>;
export type GetApiDepartmentsIdQueryError = AxiosError<unknown>;

export function useGetApiDepartmentsId<
    TData = Awaited<ReturnType<typeof getApiDepartmentsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDepartmentsId>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDepartmentsId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDepartmentsId<
    TData = Awaited<ReturnType<typeof getApiDepartmentsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDepartmentsId>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDepartmentsId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDepartmentsId<
    TData = Awaited<ReturnType<typeof getApiDepartmentsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDepartmentsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiDepartmentsId<
    TData = Awaited<ReturnType<typeof getApiDepartmentsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDepartmentsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiDepartmentsIdQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putApiDepartmentsId = (
    id: number,
    department: Department,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Departments/${id}`, department, options);
};

export const getPutApiDepartmentsIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiDepartmentsId>>,
        TError,
        { id: number; data: Department },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putApiDepartmentsId>>,
    TError,
    { id: number; data: Department },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putApiDepartmentsId>>,
        { id: number; data: Department }
    > = (props) => {
        const { id, data } = props ?? {};

        return putApiDepartmentsId(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutApiDepartmentsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiDepartmentsId>>>;
export type PutApiDepartmentsIdMutationBody = Department;
export type PutApiDepartmentsIdMutationError = AxiosError<unknown>;

export const usePutApiDepartmentsId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiDepartmentsId>>,
        TError,
        { id: number; data: Department },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putApiDepartmentsId>>,
    TError,
    { id: number; data: Department },
    TContext
> => {
    const mutationOptions = getPutApiDepartmentsIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteApiDepartmentsId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Departments/${id}`, options);
};

export const getDeleteApiDepartmentsIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiDepartmentsId>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiDepartmentsId>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiDepartmentsId>>, { id: number }> = (
        props
    ) => {
        const { id } = props ?? {};

        return deleteApiDepartmentsId(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiDepartmentsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiDepartmentsId>>>;

export type DeleteApiDepartmentsIdMutationError = AxiosError<unknown>;

export const useDeleteApiDepartmentsId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiDepartmentsId>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiDepartmentsId>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteApiDepartmentsIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiDiagnoses = (options?: AxiosRequestConfig): Promise<AxiosResponse<Diagnosis[]>> => {
    return axios.default.get(`/api/Diagnoses`, options);
};

export const getGetApiDiagnosesQueryKey = () => {
    return [`/api/Diagnoses`] as const;
};

export const getGetApiDiagnosesQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiDiagnoses>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDiagnoses>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiDiagnosesQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDiagnoses>>> = ({ signal }) =>
        getApiDiagnoses({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiDiagnoses>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiDiagnosesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDiagnoses>>>;
export type GetApiDiagnosesQueryError = AxiosError<unknown>;

export function useGetApiDiagnoses<
    TData = Awaited<ReturnType<typeof getApiDiagnoses>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDiagnoses>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDiagnoses>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDiagnoses<
    TData = Awaited<ReturnType<typeof getApiDiagnoses>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDiagnoses>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDiagnoses>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDiagnoses<
    TData = Awaited<ReturnType<typeof getApiDiagnoses>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDiagnoses>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiDiagnoses<
    TData = Awaited<ReturnType<typeof getApiDiagnoses>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDiagnoses>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiDiagnosesQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postApiDiagnoses = (
    diagnosis: Diagnosis,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Diagnosis>> => {
    return axios.default.post(`/api/Diagnoses`, diagnosis, options);
};

export const getPostApiDiagnosesMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiDiagnoses>>, TError, { data: Diagnosis }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postApiDiagnoses>>, TError, { data: Diagnosis }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiDiagnoses>>, { data: Diagnosis }> = (props) => {
        const { data } = props ?? {};

        return postApiDiagnoses(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiDiagnosesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiDiagnoses>>>;
export type PostApiDiagnosesMutationBody = Diagnosis;
export type PostApiDiagnosesMutationError = AxiosError<unknown>;

export const usePostApiDiagnoses = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiDiagnoses>>, TError, { data: Diagnosis }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postApiDiagnoses>>, TError, { data: Diagnosis }, TContext> => {
    const mutationOptions = getPostApiDiagnosesMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiDiagnosesId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Diagnosis>> => {
    return axios.default.get(`/api/Diagnoses/${id}`, options);
};

export const getGetApiDiagnosesIdQueryKey = (id: number) => {
    return [`/api/Diagnoses/${id}`] as const;
};

export const getGetApiDiagnosesIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiDiagnosesId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDiagnosesId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiDiagnosesIdQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDiagnosesId>>> = ({ signal }) =>
        getApiDiagnosesId(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiDiagnosesId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiDiagnosesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDiagnosesId>>>;
export type GetApiDiagnosesIdQueryError = AxiosError<unknown>;

export function useGetApiDiagnosesId<
    TData = Awaited<ReturnType<typeof getApiDiagnosesId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDiagnosesId>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDiagnosesId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDiagnosesId<
    TData = Awaited<ReturnType<typeof getApiDiagnosesId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDiagnosesId>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDiagnosesId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDiagnosesId<
    TData = Awaited<ReturnType<typeof getApiDiagnosesId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDiagnosesId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiDiagnosesId<
    TData = Awaited<ReturnType<typeof getApiDiagnosesId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDiagnosesId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiDiagnosesIdQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putApiDiagnosesId = (
    id: number,
    diagnosis: Diagnosis,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Diagnoses/${id}`, diagnosis, options);
};

export const getPutApiDiagnosesIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiDiagnosesId>>,
        TError,
        { id: number; data: Diagnosis },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putApiDiagnosesId>>,
    TError,
    { id: number; data: Diagnosis },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putApiDiagnosesId>>,
        { id: number; data: Diagnosis }
    > = (props) => {
        const { id, data } = props ?? {};

        return putApiDiagnosesId(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutApiDiagnosesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiDiagnosesId>>>;
export type PutApiDiagnosesIdMutationBody = Diagnosis;
export type PutApiDiagnosesIdMutationError = AxiosError<unknown>;

export const usePutApiDiagnosesId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiDiagnosesId>>,
        TError,
        { id: number; data: Diagnosis },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putApiDiagnosesId>>,
    TError,
    { id: number; data: Diagnosis },
    TContext
> => {
    const mutationOptions = getPutApiDiagnosesIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteApiDiagnosesId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Diagnoses/${id}`, options);
};

export const getDeleteApiDiagnosesIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiDiagnosesId>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiDiagnosesId>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiDiagnosesId>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteApiDiagnosesId(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiDiagnosesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiDiagnosesId>>>;

export type DeleteApiDiagnosesIdMutationError = AxiosError<unknown>;

export const useDeleteApiDiagnosesId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiDiagnosesId>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiDiagnosesId>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteApiDiagnosesIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiDoctors = (options?: AxiosRequestConfig): Promise<AxiosResponse<Doctor[]>> => {
    return axios.default.get(`/api/Doctors`, options);
};

export const getGetApiDoctorsQueryKey = () => {
    return [`/api/Doctors`] as const;
};

export const getGetApiDoctorsQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiDoctors>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctors>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiDoctorsQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDoctors>>> = ({ signal }) =>
        getApiDoctors({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiDoctors>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiDoctorsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDoctors>>>;
export type GetApiDoctorsQueryError = AxiosError<unknown>;

export function useGetApiDoctors<
    TData = Awaited<ReturnType<typeof getApiDoctors>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctors>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDoctors>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDoctors<
    TData = Awaited<ReturnType<typeof getApiDoctors>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctors>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDoctors>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDoctors<
    TData = Awaited<ReturnType<typeof getApiDoctors>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctors>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiDoctors<
    TData = Awaited<ReturnType<typeof getApiDoctors>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctors>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiDoctorsQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postApiDoctors = (doctor: Doctor, options?: AxiosRequestConfig): Promise<AxiosResponse<Doctor>> => {
    return axios.default.post(`/api/Doctors`, doctor, options);
};

export const getPostApiDoctorsMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiDoctors>>, TError, { data: Doctor }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postApiDoctors>>, TError, { data: Doctor }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiDoctors>>, { data: Doctor }> = (props) => {
        const { data } = props ?? {};

        return postApiDoctors(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiDoctorsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiDoctors>>>;
export type PostApiDoctorsMutationBody = Doctor;
export type PostApiDoctorsMutationError = AxiosError<unknown>;

export const usePostApiDoctors = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiDoctors>>, TError, { data: Doctor }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postApiDoctors>>, TError, { data: Doctor }, TContext> => {
    const mutationOptions = getPostApiDoctorsMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiDoctorsId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Doctor>> => {
    return axios.default.get(`/api/Doctors/${id}`, options);
};

export const getGetApiDoctorsIdQueryKey = (id: number) => {
    return [`/api/Doctors/${id}`] as const;
};

export const getGetApiDoctorsIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiDoctorsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiDoctorsIdQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDoctorsId>>> = ({ signal }) =>
        getApiDoctorsId(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiDoctorsId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiDoctorsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDoctorsId>>>;
export type GetApiDoctorsIdQueryError = AxiosError<unknown>;

export function useGetApiDoctorsId<TData = Awaited<ReturnType<typeof getApiDoctorsId>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorsId>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDoctorsId>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDoctorsId<TData = Awaited<ReturnType<typeof getApiDoctorsId>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorsId>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDoctorsId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDoctorsId<TData = Awaited<ReturnType<typeof getApiDoctorsId>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiDoctorsId<TData = Awaited<ReturnType<typeof getApiDoctorsId>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiDoctorsIdQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putApiDoctorsId = (
    id: number,
    doctor: Doctor,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Doctors/${id}`, doctor, options);
};

export const getPutApiDoctorsIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiDoctorsId>>,
        TError,
        { id: number; data: Doctor },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof putApiDoctorsId>>, TError, { id: number; data: Doctor }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiDoctorsId>>, { id: number; data: Doctor }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putApiDoctorsId(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutApiDoctorsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiDoctorsId>>>;
export type PutApiDoctorsIdMutationBody = Doctor;
export type PutApiDoctorsIdMutationError = AxiosError<unknown>;

export const usePutApiDoctorsId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiDoctorsId>>,
        TError,
        { id: number; data: Doctor },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof putApiDoctorsId>>, TError, { id: number; data: Doctor }, TContext> => {
    const mutationOptions = getPutApiDoctorsIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteApiDoctorsId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Doctors/${id}`, options);
};

export const getDeleteApiDoctorsIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiDoctorsId>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiDoctorsId>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiDoctorsId>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteApiDoctorsId(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiDoctorsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiDoctorsId>>>;

export type DeleteApiDoctorsIdMutationError = AxiosError<unknown>;

export const useDeleteApiDoctorsId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiDoctorsId>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiDoctorsId>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteApiDoctorsIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const postApiDoctorsDoctorregister = (
    doctorRegistration: DoctorRegistration,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.post(`/api/Doctors/doctorregister`, doctorRegistration, options);
};

export const getPostApiDoctorsDoctorregisterMutationOptions = <
    TError = AxiosError<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiDoctorsDoctorregister>>,
        TError,
        { data: DoctorRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiDoctorsDoctorregister>>,
    TError,
    { data: DoctorRegistration },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiDoctorsDoctorregister>>,
        { data: DoctorRegistration }
    > = (props) => {
        const { data } = props ?? {};

        return postApiDoctorsDoctorregister(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiDoctorsDoctorregisterMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiDoctorsDoctorregister>>
>;
export type PostApiDoctorsDoctorregisterMutationBody = DoctorRegistration;
export type PostApiDoctorsDoctorregisterMutationError = AxiosError<unknown>;

export const usePostApiDoctorsDoctorregister = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiDoctorsDoctorregister>>,
        TError,
        { data: DoctorRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiDoctorsDoctorregister>>,
    TError,
    { data: DoctorRegistration },
    TContext
> => {
    const mutationOptions = getPostApiDoctorsDoctorregisterMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiDoctorSchedules = (options?: AxiosRequestConfig): Promise<AxiosResponse<DoctorSchedule[]>> => {
    return axios.default.get(`/api/DoctorSchedules`, options);
};

export const getGetApiDoctorSchedulesQueryKey = () => {
    return [`/api/DoctorSchedules`] as const;
};

export const getGetApiDoctorSchedulesQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedules>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiDoctorSchedulesQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDoctorSchedules>>> = ({ signal }) =>
        getApiDoctorSchedules({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiDoctorSchedules>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiDoctorSchedulesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDoctorSchedules>>>;
export type GetApiDoctorSchedulesQueryError = AxiosError<unknown>;

export function useGetApiDoctorSchedules<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedules>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDoctorSchedules>>, TError, TData>,
            'initialData'
        >;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDoctorSchedules<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedules>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDoctorSchedules>>, TError, TData>,
            'initialData'
        >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDoctorSchedules<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedules>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiDoctorSchedules<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedules>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiDoctorSchedulesQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postApiDoctorSchedules = (
    doctorSchedule: DoctorSchedule,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorSchedule>> => {
    return axios.default.post(`/api/DoctorSchedules`, doctorSchedule, options);
};

export const getPostApiDoctorSchedulesMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiDoctorSchedules>>,
        TError,
        { data: DoctorSchedule },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiDoctorSchedules>>,
    TError,
    { data: DoctorSchedule },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiDoctorSchedules>>, { data: DoctorSchedule }> = (
        props
    ) => {
        const { data } = props ?? {};

        return postApiDoctorSchedules(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiDoctorSchedulesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiDoctorSchedules>>>;
export type PostApiDoctorSchedulesMutationBody = DoctorSchedule;
export type PostApiDoctorSchedulesMutationError = AxiosError<unknown>;

export const usePostApiDoctorSchedules = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiDoctorSchedules>>,
        TError,
        { data: DoctorSchedule },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiDoctorSchedules>>,
    TError,
    { data: DoctorSchedule },
    TContext
> => {
    const mutationOptions = getPostApiDoctorSchedulesMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiDoctorSchedulesId = (
    id: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorSchedule>> => {
    return axios.default.get(`/api/DoctorSchedules/${id}`, options);
};

export const getGetApiDoctorSchedulesIdQueryKey = (id: number) => {
    return [`/api/DoctorSchedules/${id}`] as const;
};

export const getGetApiDoctorSchedulesIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiDoctorSchedulesId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiDoctorSchedulesIdQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDoctorSchedulesId>>> = ({ signal }) =>
        getApiDoctorSchedulesId(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiDoctorSchedulesId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiDoctorSchedulesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDoctorSchedulesId>>>;
export type GetApiDoctorSchedulesIdQueryError = AxiosError<unknown>;

export function useGetApiDoctorSchedulesId<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedulesId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesId>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDoctorSchedulesId<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedulesId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesId>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDoctorSchedulesId<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedulesId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiDoctorSchedulesId<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedulesId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiDoctorSchedulesIdQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putApiDoctorSchedulesId = (
    id: number,
    doctorSchedule: DoctorSchedule,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/DoctorSchedules/${id}`, doctorSchedule, options);
};

export const getPutApiDoctorSchedulesIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiDoctorSchedulesId>>,
        TError,
        { id: number; data: DoctorSchedule },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putApiDoctorSchedulesId>>,
    TError,
    { id: number; data: DoctorSchedule },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putApiDoctorSchedulesId>>,
        { id: number; data: DoctorSchedule }
    > = (props) => {
        const { id, data } = props ?? {};

        return putApiDoctorSchedulesId(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutApiDoctorSchedulesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiDoctorSchedulesId>>>;
export type PutApiDoctorSchedulesIdMutationBody = DoctorSchedule;
export type PutApiDoctorSchedulesIdMutationError = AxiosError<unknown>;

export const usePutApiDoctorSchedulesId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiDoctorSchedulesId>>,
        TError,
        { id: number; data: DoctorSchedule },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putApiDoctorSchedulesId>>,
    TError,
    { id: number; data: DoctorSchedule },
    TContext
> => {
    const mutationOptions = getPutApiDoctorSchedulesIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteApiDoctorSchedulesId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/DoctorSchedules/${id}`, options);
};

export const getDeleteApiDoctorSchedulesIdMutationOptions = <
    TError = AxiosError<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiDoctorSchedulesId>>,
        TError,
        { id: number },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiDoctorSchedulesId>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiDoctorSchedulesId>>, { id: number }> = (
        props
    ) => {
        const { id } = props ?? {};

        return deleteApiDoctorSchedulesId(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiDoctorSchedulesIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteApiDoctorSchedulesId>>
>;

export type DeleteApiDoctorSchedulesIdMutationError = AxiosError<unknown>;

export const useDeleteApiDoctorSchedulesId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiDoctorSchedulesId>>,
        TError,
        { id: number },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiDoctorSchedulesId>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteApiDoctorSchedulesIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiDoctorSchedulesDoctorScheduleDoctorId = (
    doctorId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorSchedule[]>> => {
    return axios.default.get(`/api/DoctorSchedules/doctor-schedule/${doctorId}`, options);
};

export const getGetApiDoctorSchedulesDoctorScheduleDoctorIdQueryKey = (doctorId: number) => {
    return [`/api/DoctorSchedules/doctor-schedule/${doctorId}`] as const;
};

export const getGetApiDoctorSchedulesDoctorScheduleDoctorIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>, TError, TData>
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiDoctorSchedulesDoctorScheduleDoctorIdQueryKey(doctorId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>> = ({
        signal,
    }) => getApiDoctorSchedulesDoctorScheduleDoctorId(doctorId, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!doctorId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiDoctorSchedulesDoctorScheduleDoctorIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>
>;
export type GetApiDoctorSchedulesDoctorScheduleDoctorIdQueryError = AxiosError<unknown>;

export function useGetApiDoctorSchedulesDoctorScheduleDoctorId<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDoctorSchedulesDoctorScheduleDoctorId<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiDoctorSchedulesDoctorScheduleDoctorId<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>, TError, TData>
        >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiDoctorSchedulesDoctorScheduleDoctorId<
    TData = Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiDoctorSchedulesDoctorScheduleDoctorId>>, TError, TData>
        >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiDoctorSchedulesDoctorScheduleDoctorIdQueryOptions(doctorId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getApiEmergencyContacts = (options?: AxiosRequestConfig): Promise<AxiosResponse<EmergencyContact[]>> => {
    return axios.default.get(`/api/EmergencyContacts`, options);
};

export const getGetApiEmergencyContactsQueryKey = () => {
    return [`/api/EmergencyContacts`] as const;
};

export const getGetApiEmergencyContactsQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEmergencyContacts>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiEmergencyContactsQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEmergencyContacts>>> = ({ signal }) =>
        getApiEmergencyContacts({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiEmergencyContacts>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiEmergencyContactsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmergencyContacts>>>;
export type GetApiEmergencyContactsQueryError = AxiosError<unknown>;

export function useGetApiEmergencyContacts<
    TData = Awaited<ReturnType<typeof getApiEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEmergencyContacts>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiEmergencyContacts>>, TError, TData>,
            'initialData'
        >;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiEmergencyContacts<
    TData = Awaited<ReturnType<typeof getApiEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEmergencyContacts>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiEmergencyContacts>>, TError, TData>,
            'initialData'
        >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiEmergencyContacts<
    TData = Awaited<ReturnType<typeof getApiEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEmergencyContacts>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiEmergencyContacts<
    TData = Awaited<ReturnType<typeof getApiEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEmergencyContacts>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiEmergencyContactsQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postApiEmergencyContacts = (
    emergencyContact: EmergencyContact,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<EmergencyContact>> => {
    return axios.default.post(`/api/EmergencyContacts`, emergencyContact, options);
};

export const getPostApiEmergencyContactsMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiEmergencyContacts>>,
        TError,
        { data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiEmergencyContacts>>,
    TError,
    { data: EmergencyContact },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiEmergencyContacts>>,
        { data: EmergencyContact }
    > = (props) => {
        const { data } = props ?? {};

        return postApiEmergencyContacts(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiEmergencyContactsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmergencyContacts>>>;
export type PostApiEmergencyContactsMutationBody = EmergencyContact;
export type PostApiEmergencyContactsMutationError = AxiosError<unknown>;

export const usePostApiEmergencyContacts = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiEmergencyContacts>>,
        TError,
        { data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiEmergencyContacts>>,
    TError,
    { data: EmergencyContact },
    TContext
> => {
    const mutationOptions = getPostApiEmergencyContactsMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiEmergencyContactsId = (
    id: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<EmergencyContact>> => {
    return axios.default.get(`/api/EmergencyContacts/${id}`, options);
};

export const getGetApiEmergencyContactsIdQueryKey = (id: number) => {
    return [`/api/EmergencyContacts/${id}`] as const;
};

export const getGetApiEmergencyContactsIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiEmergencyContactsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEmergencyContactsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiEmergencyContactsIdQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEmergencyContactsId>>> = ({ signal }) =>
        getApiEmergencyContactsId(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiEmergencyContactsId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiEmergencyContactsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmergencyContactsId>>>;
export type GetApiEmergencyContactsIdQueryError = AxiosError<unknown>;

export function useGetApiEmergencyContactsId<
    TData = Awaited<ReturnType<typeof getApiEmergencyContactsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEmergencyContactsId>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiEmergencyContactsId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiEmergencyContactsId<
    TData = Awaited<ReturnType<typeof getApiEmergencyContactsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEmergencyContactsId>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiEmergencyContactsId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiEmergencyContactsId<
    TData = Awaited<ReturnType<typeof getApiEmergencyContactsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEmergencyContactsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiEmergencyContactsId<
    TData = Awaited<ReturnType<typeof getApiEmergencyContactsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEmergencyContactsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiEmergencyContactsIdQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putApiEmergencyContactsId = (
    id: number,
    emergencyContact: EmergencyContact,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/EmergencyContacts/${id}`, emergencyContact, options);
};

export const getPutApiEmergencyContactsIdMutationOptions = <
    TError = AxiosError<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiEmergencyContactsId>>,
        TError,
        { id: number; data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putApiEmergencyContactsId>>,
    TError,
    { id: number; data: EmergencyContact },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putApiEmergencyContactsId>>,
        { id: number; data: EmergencyContact }
    > = (props) => {
        const { id, data } = props ?? {};

        return putApiEmergencyContactsId(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutApiEmergencyContactsIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof putApiEmergencyContactsId>>
>;
export type PutApiEmergencyContactsIdMutationBody = EmergencyContact;
export type PutApiEmergencyContactsIdMutationError = AxiosError<unknown>;

export const usePutApiEmergencyContactsId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiEmergencyContactsId>>,
        TError,
        { id: number; data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putApiEmergencyContactsId>>,
    TError,
    { id: number; data: EmergencyContact },
    TContext
> => {
    const mutationOptions = getPutApiEmergencyContactsIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteApiEmergencyContactsId = (
    id: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/EmergencyContacts/${id}`, options);
};

export const getDeleteApiEmergencyContactsIdMutationOptions = <
    TError = AxiosError<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiEmergencyContactsId>>,
        TError,
        { id: number },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiEmergencyContactsId>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiEmergencyContactsId>>, { id: number }> = (
        props
    ) => {
        const { id } = props ?? {};

        return deleteApiEmergencyContactsId(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiEmergencyContactsIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteApiEmergencyContactsId>>
>;

export type DeleteApiEmergencyContactsIdMutationError = AxiosError<unknown>;

export const useDeleteApiEmergencyContactsId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiEmergencyContactsId>>,
        TError,
        { id: number },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiEmergencyContactsId>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteApiEmergencyContactsIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiInvoices = (options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice[]>> => {
    return axios.default.get(`/api/Invoices`, options);
};

export const getGetApiInvoicesQueryKey = () => {
    return [`/api/Invoices`] as const;
};

export const getGetApiInvoicesQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiInvoices>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiInvoices>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiInvoicesQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiInvoices>>> = ({ signal }) =>
        getApiInvoices({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiInvoices>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiInvoicesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiInvoices>>>;
export type GetApiInvoicesQueryError = AxiosError<unknown>;

export function useGetApiInvoices<
    TData = Awaited<ReturnType<typeof getApiInvoices>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiInvoices>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiInvoices>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiInvoices<
    TData = Awaited<ReturnType<typeof getApiInvoices>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiInvoices>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiInvoices>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiInvoices<
    TData = Awaited<ReturnType<typeof getApiInvoices>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiInvoices>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiInvoices<
    TData = Awaited<ReturnType<typeof getApiInvoices>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiInvoices>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiInvoicesQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postApiInvoices = (invoice: Invoice, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> => {
    return axios.default.post(`/api/Invoices`, invoice, options);
};

export const getPostApiInvoicesMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiInvoices>>, TError, { data: Invoice }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postApiInvoices>>, TError, { data: Invoice }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiInvoices>>, { data: Invoice }> = (props) => {
        const { data } = props ?? {};

        return postApiInvoices(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiInvoicesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiInvoices>>>;
export type PostApiInvoicesMutationBody = Invoice;
export type PostApiInvoicesMutationError = AxiosError<unknown>;

export const usePostApiInvoices = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiInvoices>>, TError, { data: Invoice }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postApiInvoices>>, TError, { data: Invoice }, TContext> => {
    const mutationOptions = getPostApiInvoicesMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiInvoicesId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> => {
    return axios.default.get(`/api/Invoices/${id}`, options);
};

export const getGetApiInvoicesIdQueryKey = (id: number) => {
    return [`/api/Invoices/${id}`] as const;
};

export const getGetApiInvoicesIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiInvoicesId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiInvoicesId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiInvoicesIdQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiInvoicesId>>> = ({ signal }) =>
        getApiInvoicesId(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiInvoicesId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiInvoicesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiInvoicesId>>>;
export type GetApiInvoicesIdQueryError = AxiosError<unknown>;

export function useGetApiInvoicesId<TData = Awaited<ReturnType<typeof getApiInvoicesId>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiInvoicesId>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiInvoicesId>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiInvoicesId<TData = Awaited<ReturnType<typeof getApiInvoicesId>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiInvoicesId>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiInvoicesId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiInvoicesId<TData = Awaited<ReturnType<typeof getApiInvoicesId>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiInvoicesId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiInvoicesId<TData = Awaited<ReturnType<typeof getApiInvoicesId>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiInvoicesId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiInvoicesIdQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putApiInvoicesId = (
    id: number,
    invoice: Invoice,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Invoices/${id}`, invoice, options);
};

export const getPutApiInvoicesIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiInvoicesId>>,
        TError,
        { id: number; data: Invoice },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putApiInvoicesId>>,
    TError,
    { id: number; data: Invoice },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiInvoicesId>>, { id: number; data: Invoice }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putApiInvoicesId(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutApiInvoicesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiInvoicesId>>>;
export type PutApiInvoicesIdMutationBody = Invoice;
export type PutApiInvoicesIdMutationError = AxiosError<unknown>;

export const usePutApiInvoicesId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiInvoicesId>>,
        TError,
        { id: number; data: Invoice },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putApiInvoicesId>>,
    TError,
    { id: number; data: Invoice },
    TContext
> => {
    const mutationOptions = getPutApiInvoicesIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteApiInvoicesId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Invoices/${id}`, options);
};

export const getDeleteApiInvoicesIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiInvoicesId>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiInvoicesId>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiInvoicesId>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteApiInvoicesId(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiInvoicesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiInvoicesId>>>;

export type DeleteApiInvoicesIdMutationError = AxiosError<unknown>;

export const useDeleteApiInvoicesId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiInvoicesId>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiInvoicesId>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteApiInvoicesIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiPatients = (options?: AxiosRequestConfig): Promise<AxiosResponse<Patient[]>> => {
    return axios.default.get(`/api/Patients`, options);
};

export const getGetApiPatientsQueryKey = () => {
    return [`/api/Patients`] as const;
};

export const getGetApiPatientsQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiPatients>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPatients>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiPatientsQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPatients>>> = ({ signal }) =>
        getApiPatients({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiPatients>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiPatientsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPatients>>>;
export type GetApiPatientsQueryError = AxiosError<unknown>;

export function useGetApiPatients<
    TData = Awaited<ReturnType<typeof getApiPatients>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPatients>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPatients>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiPatients<
    TData = Awaited<ReturnType<typeof getApiPatients>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPatients>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPatients>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiPatients<
    TData = Awaited<ReturnType<typeof getApiPatients>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPatients>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiPatients<
    TData = Awaited<ReturnType<typeof getApiPatients>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPatients>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiPatientsQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postApiPatients = (patient: Patient, options?: AxiosRequestConfig): Promise<AxiosResponse<Patient>> => {
    return axios.default.post(`/api/Patients`, patient, options);
};

export const getPostApiPatientsMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiPatients>>, TError, { data: Patient }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postApiPatients>>, TError, { data: Patient }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPatients>>, { data: Patient }> = (props) => {
        const { data } = props ?? {};

        return postApiPatients(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiPatientsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPatients>>>;
export type PostApiPatientsMutationBody = Patient;
export type PostApiPatientsMutationError = AxiosError<unknown>;

export const usePostApiPatients = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiPatients>>, TError, { data: Patient }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postApiPatients>>, TError, { data: Patient }, TContext> => {
    const mutationOptions = getPostApiPatientsMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getApiPatientsId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Patient>> => {
    return axios.default.get(`/api/Patients/${id}`, options);
};

export const getGetApiPatientsIdQueryKey = (id: number) => {
    return [`/api/Patients/${id}`] as const;
};

export const getGetApiPatientsIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiPatientsId>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPatientsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiPatientsIdQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPatientsId>>> = ({ signal }) =>
        getApiPatientsId(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiPatientsId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiPatientsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPatientsId>>>;
export type GetApiPatientsIdQueryError = AxiosError<unknown>;

export function useGetApiPatientsId<TData = Awaited<ReturnType<typeof getApiPatientsId>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPatientsId>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPatientsId>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiPatientsId<TData = Awaited<ReturnType<typeof getApiPatientsId>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPatientsId>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPatientsId>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiPatientsId<TData = Awaited<ReturnType<typeof getApiPatientsId>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPatientsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiPatientsId<TData = Awaited<ReturnType<typeof getApiPatientsId>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPatientsId>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiPatientsIdQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putApiPatientsId = (
    id: number,
    patient: Patient,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Patients/${id}`, patient, options);
};

export const getPutApiPatientsIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiPatientsId>>,
        TError,
        { id: number; data: Patient },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putApiPatientsId>>,
    TError,
    { id: number; data: Patient },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiPatientsId>>, { id: number; data: Patient }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putApiPatientsId(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutApiPatientsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPatientsId>>>;
export type PutApiPatientsIdMutationBody = Patient;
export type PutApiPatientsIdMutationError = AxiosError<unknown>;

export const usePutApiPatientsId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiPatientsId>>,
        TError,
        { id: number; data: Patient },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putApiPatientsId>>,
    TError,
    { id: number; data: Patient },
    TContext
> => {
    const mutationOptions = getPutApiPatientsIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteApiPatientsId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Patients/${id}`, options);
};

export const getDeleteApiPatientsIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiPatientsId>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiPatientsId>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiPatientsId>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteApiPatientsId(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiPatientsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPatientsId>>>;

export type DeleteApiPatientsIdMutationError = AxiosError<unknown>;

export const useDeleteApiPatientsId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiPatientsId>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiPatientsId>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteApiPatientsIdMutationOptions(options);

    return useMutation(mutationOptions);
};

export const postApiPatientsPatientregister = (
    patientRegistration: PatientRegistration,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.post(`/api/Patients/patientregister`, patientRegistration, options);
};

export const getPostApiPatientsPatientregisterMutationOptions = <
    TError = AxiosError<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiPatientsPatientregister>>,
        TError,
        { data: PatientRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiPatientsPatientregister>>,
    TError,
    { data: PatientRegistration },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiPatientsPatientregister>>,
        { data: PatientRegistration }
    > = (props) => {
        const { data } = props ?? {};

        return postApiPatientsPatientregister(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiPatientsPatientregisterMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiPatientsPatientregister>>
>;
export type PostApiPatientsPatientregisterMutationBody = PatientRegistration;
export type PostApiPatientsPatientregisterMutationError = AxiosError<unknown>;

export const usePostApiPatientsPatientregister = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiPatientsPatientregister>>,
        TError,
        { data: PatientRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiPatientsPatientregister>>,
    TError,
    { data: PatientRegistration },
    TContext
> => {
    const mutationOptions = getPostApiPatientsPatientregisterMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getWeatherForecast = (options?: AxiosRequestConfig): Promise<AxiosResponse<WeatherForecast[]>> => {
    return axios.default.get(`/WeatherForecast`, options);
};

export const getGetWeatherForecastQueryKey = () => {
    return [`/WeatherForecast`] as const;
};

export const getGetWeatherForecastQueryOptions = <
    TData = Awaited<ReturnType<typeof getWeatherForecast>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetWeatherForecastQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeatherForecast>>> = ({ signal }) =>
        getWeatherForecast({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getWeatherForecast>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetWeatherForecastQueryResult = NonNullable<Awaited<ReturnType<typeof getWeatherForecast>>>;
export type GetWeatherForecastQueryError = AxiosError<unknown>;

export function useGetWeatherForecast<
    TData = Awaited<ReturnType<typeof getWeatherForecast>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWeatherForecast<
    TData = Awaited<ReturnType<typeof getWeatherForecast>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWeatherForecast<
    TData = Awaited<ReturnType<typeof getWeatherForecast>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetWeatherForecast<
    TData = Awaited<ReturnType<typeof getWeatherForecast>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetWeatherForecastQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
