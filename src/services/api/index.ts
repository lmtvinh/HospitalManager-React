/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Hopital Management System Api
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
    Appointment,
    AppointmentDTOPaginated,
    AssignDoctorParams,
    CloseTicketParams,
    Department,
    DepartmentDTOPaginated,
    Diagnosis,
    DiagnosisDTO,
    DiagnosisDTOPaginated,
    Doctor,
    DoctorDTO,
    DoctorDTOPaginated,
    DoctorRegistration,
    DoctorSchedule,
    DoctorScheduleCreateDTO,
    DoctorScheduleDTO,
    DoctorScheduleDTOPaginated,
    DownloadFileParams,
    EmergencyContact,
    GetAllDoctorSchedulesParams,
    GetAppointmentsParams,
    GetDepartmentsParams,
    GetDiagnosesParams,
    GetDoctorTicketsParams,
    GetDoctorsParams,
    GetInvoicesParams,
    GetMessagesParams,
    GetPatientTicketsParams,
    GetPatientsParams,
    GetUnAssignedTicketsParams,
    IdentityExistsParams,
    Invoice,
    InvoicePaginated,
    LoginModel,
    LoginResponse,
    Message,
    MessageDTOPaginated,
    OpenTicketParams,
    Patient,
    PatientDTOPaginated,
    PatientRegistration,
    SendMessageParams,
    Ticket,
    TicketDTO,
    TicketPaginated,
    UploadFileBody,
    UserProfileDTO,
    WeatherForecast,
} from '../../types';

export const login = (loginModel: LoginModel, options?: AxiosRequestConfig): Promise<AxiosResponse<LoginResponse>> => {
    return axios.default.post(`/api/Account/Login`, loginModel, options);
};

export const getLoginMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginModel }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginModel }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, { data: LoginModel }> = (props) => {
        const { data } = props ?? {};

        return login(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type LoginMutationBody = LoginModel;
export type LoginMutationError = AxiosError<unknown>;

export const useLogin = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginModel }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof login>>, TError, { data: LoginModel }, TContext> => {
    const mutationOptions = getLoginMutationOptions(options);

    return useMutation(mutationOptions);
};

export const logout = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.post(`/api/Account/Logout`, undefined, options);
};

export const getLogoutMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError, void, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError, void, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof logout>>, void> = () => {
        return logout(axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof logout>>>;

export type LogoutMutationError = AxiosError<unknown>;

export const useLogout = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError, void, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof logout>>, TError, void, TContext> => {
    const mutationOptions = getLogoutMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getCurrentUser = (options?: AxiosRequestConfig): Promise<AxiosResponse<UserProfileDTO>> => {
    return axios.default.get(`/api/Account/@Me`, options);
};

export const getGetCurrentUserQueryKey = () => {
    return [`/api/Account/@Me`] as const;
};

export const getGetCurrentUserQueryOptions = <
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({ signal }) =>
        getCurrentUser({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUser>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>;
export type GetCurrentUserQueryError = AxiosError<unknown>;

export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetCurrentUserQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const loginWithGoogle = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.get(`/api/Account/login/google`, options);
};

export const getLoginWithGoogleQueryKey = () => {
    return [`/api/Account/login/google`] as const;
};

export const getLoginWithGoogleQueryOptions = <
    TData = Awaited<ReturnType<typeof loginWithGoogle>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getLoginWithGoogleQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof loginWithGoogle>>> = ({ signal }) =>
        loginWithGoogle({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof loginWithGoogle>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type LoginWithGoogleQueryResult = NonNullable<Awaited<ReturnType<typeof loginWithGoogle>>>;
export type LoginWithGoogleQueryError = AxiosError<unknown>;

export function useLoginWithGoogle<
    TData = Awaited<ReturnType<typeof loginWithGoogle>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useLoginWithGoogle<
    TData = Awaited<ReturnType<typeof loginWithGoogle>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useLoginWithGoogle<
    TData = Awaited<ReturnType<typeof loginWithGoogle>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useLoginWithGoogle<
    TData = Awaited<ReturnType<typeof loginWithGoogle>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getLoginWithGoogleQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const googleResponse = (options?: AxiosRequestConfig): Promise<AxiosResponse<LoginResponse>> => {
    return axios.default.get(`/api/Account/google-response`, options);
};

export const getGoogleResponseQueryKey = () => {
    return [`/api/Account/google-response`] as const;
};

export const getGoogleResponseQueryOptions = <
    TData = Awaited<ReturnType<typeof googleResponse>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleResponse>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGoogleResponseQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof googleResponse>>> = ({ signal }) =>
        googleResponse({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof googleResponse>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GoogleResponseQueryResult = NonNullable<Awaited<ReturnType<typeof googleResponse>>>;
export type GoogleResponseQueryError = AxiosError<unknown>;

export function useGoogleResponse<
    TData = Awaited<ReturnType<typeof googleResponse>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleResponse>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof googleResponse>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGoogleResponse<
    TData = Awaited<ReturnType<typeof googleResponse>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleResponse>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof googleResponse>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGoogleResponse<
    TData = Awaited<ReturnType<typeof googleResponse>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleResponse>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGoogleResponse<
    TData = Awaited<ReturnType<typeof googleResponse>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleResponse>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGoogleResponseQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const identityExists = (
    params?: IdentityExistsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<boolean>> => {
    return axios.default.get(`/api/Account/Identity-Exists`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getIdentityExistsQueryKey = (params?: IdentityExistsParams) => {
    return [`/api/Account/Identity-Exists`, ...(params ? [params] : [])] as const;
};

export const getIdentityExistsQueryOptions = <
    TData = Awaited<ReturnType<typeof identityExists>>,
    TError = AxiosError<unknown>,
>(
    params?: IdentityExistsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof identityExists>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getIdentityExistsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof identityExists>>> = ({ signal }) =>
        identityExists(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof identityExists>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type IdentityExistsQueryResult = NonNullable<Awaited<ReturnType<typeof identityExists>>>;
export type IdentityExistsQueryError = AxiosError<unknown>;

export function useIdentityExists<TData = Awaited<ReturnType<typeof identityExists>>, TError = AxiosError<unknown>>(
    params: undefined | IdentityExistsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof identityExists>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof identityExists>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useIdentityExists<TData = Awaited<ReturnType<typeof identityExists>>, TError = AxiosError<unknown>>(
    params?: IdentityExistsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof identityExists>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof identityExists>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useIdentityExists<TData = Awaited<ReturnType<typeof identityExists>>, TError = AxiosError<unknown>>(
    params?: IdentityExistsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof identityExists>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useIdentityExists<TData = Awaited<ReturnType<typeof identityExists>>, TError = AxiosError<unknown>>(
    params?: IdentityExistsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof identityExists>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getIdentityExistsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getAppointments = (
    params?: GetAppointmentsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<AppointmentDTOPaginated>> => {
    return axios.default.get(`/api/Appointments`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetAppointmentsQueryKey = (params?: GetAppointmentsParams) => {
    return [`/api/Appointments`, ...(params ? [params] : [])] as const;
};

export const getGetAppointmentsQueryOptions = <
    TData = Awaited<ReturnType<typeof getAppointments>>,
    TError = AxiosError<unknown>,
>(
    params?: GetAppointmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetAppointmentsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppointments>>> = ({ signal }) =>
        getAppointments(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getAppointments>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetAppointmentsQueryResult = NonNullable<Awaited<ReturnType<typeof getAppointments>>>;
export type GetAppointmentsQueryError = AxiosError<unknown>;

export function useGetAppointments<TData = Awaited<ReturnType<typeof getAppointments>>, TError = AxiosError<unknown>>(
    params: undefined | GetAppointmentsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointments<TData = Awaited<ReturnType<typeof getAppointments>>, TError = AxiosError<unknown>>(
    params?: GetAppointmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointments<TData = Awaited<ReturnType<typeof getAppointments>>, TError = AxiosError<unknown>>(
    params?: GetAppointmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAppointments<TData = Awaited<ReturnType<typeof getAppointments>>, TError = AxiosError<unknown>>(
    params?: GetAppointmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetAppointmentsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postAppointment = (
    appointment: Appointment,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Appointment>> => {
    return axios.default.post(`/api/Appointments`, appointment, options);
};

export const getPostAppointmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAppointment>>, TError, { data: Appointment }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postAppointment>>, TError, { data: Appointment }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAppointment>>, { data: Appointment }> = (
        props
    ) => {
        const { data } = props ?? {};

        return postAppointment(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostAppointmentMutationResult = NonNullable<Awaited<ReturnType<typeof postAppointment>>>;
export type PostAppointmentMutationBody = Appointment;
export type PostAppointmentMutationError = AxiosError<unknown>;

export const usePostAppointment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAppointment>>, TError, { data: Appointment }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postAppointment>>, TError, { data: Appointment }, TContext> => {
    const mutationOptions = getPostAppointmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getAppointment = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Appointment>> => {
    return axios.default.get(`/api/Appointments/${id}`, options);
};

export const getGetAppointmentQueryKey = (id: number) => {
    return [`/api/Appointments/${id}`] as const;
};

export const getGetAppointmentQueryOptions = <
    TData = Awaited<ReturnType<typeof getAppointment>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetAppointmentQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppointment>>> = ({ signal }) =>
        getAppointment(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getAppointment>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetAppointmentQueryResult = NonNullable<Awaited<ReturnType<typeof getAppointment>>>;
export type GetAppointmentQueryError = AxiosError<unknown>;

export function useGetAppointment<TData = Awaited<ReturnType<typeof getAppointment>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointment<TData = Awaited<ReturnType<typeof getAppointment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointment<TData = Awaited<ReturnType<typeof getAppointment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAppointment<TData = Awaited<ReturnType<typeof getAppointment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetAppointmentQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putAppointment = (
    id: number,
    appointment: Appointment,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Appointments/${id}`, appointment, options);
};

export const getPutAppointmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putAppointment>>,
        TError,
        { id: number; data: Appointment },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putAppointment>>,
    TError,
    { id: number; data: Appointment },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putAppointment>>,
        { id: number; data: Appointment }
    > = (props) => {
        const { id, data } = props ?? {};

        return putAppointment(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutAppointmentMutationResult = NonNullable<Awaited<ReturnType<typeof putAppointment>>>;
export type PutAppointmentMutationBody = Appointment;
export type PutAppointmentMutationError = AxiosError<unknown>;

export const usePutAppointment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putAppointment>>,
        TError,
        { id: number; data: Appointment },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putAppointment>>,
    TError,
    { id: number; data: Appointment },
    TContext
> => {
    const mutationOptions = getPutAppointmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteAppointment = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Appointments/${id}`, options);
};

export const getDeleteAppointmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteAppointment>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteAppointment>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAppointment>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteAppointment(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteAppointmentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAppointment>>>;

export type DeleteAppointmentMutationError = AxiosError<unknown>;

export const useDeleteAppointment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteAppointment>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteAppointment>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteAppointmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getAppointmentsByDoctorAndDate = (
    doctorId: number,
    appointmentDate: string,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Appointment[]>> => {
    return axios.default.get(`/api/Appointments/doctor/${doctorId}/date/${appointmentDate}`, options);
};

export const getGetAppointmentsByDoctorAndDateQueryKey = (doctorId: number, appointmentDate: string) => {
    return [`/api/Appointments/doctor/${doctorId}/date/${appointmentDate}`] as const;
};

export const getGetAppointmentsByDoctorAndDateQueryOptions = <
    TData = Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetAppointmentsByDoctorAndDateQueryKey(doctorId, appointmentDate);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>> = ({ signal }) =>
        getAppointmentsByDoctorAndDate(doctorId, appointmentDate, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!(doctorId && appointmentDate), ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetAppointmentsByDoctorAndDateQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>
>;
export type GetAppointmentsByDoctorAndDateQueryError = AxiosError<unknown>;

export function useGetAppointmentsByDoctorAndDate<
    TData = Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointmentsByDoctorAndDate<
    TData = Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointmentsByDoctorAndDate<
    TData = Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAppointmentsByDoctorAndDate<
    TData = Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetAppointmentsByDoctorAndDateQueryOptions(doctorId, appointmentDate, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getDepartments = (
    params?: GetDepartmentsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DepartmentDTOPaginated>> => {
    return axios.default.get(`/api/Departments`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetDepartmentsQueryKey = (params?: GetDepartmentsParams) => {
    return [`/api/Departments`, ...(params ? [params] : [])] as const;
};

export const getGetDepartmentsQueryOptions = <
    TData = Awaited<ReturnType<typeof getDepartments>>,
    TError = AxiosError<unknown>,
>(
    params?: GetDepartmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDepartmentsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDepartments>>> = ({ signal }) =>
        getDepartments(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDepartments>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDepartmentsQueryResult = NonNullable<Awaited<ReturnType<typeof getDepartments>>>;
export type GetDepartmentsQueryError = AxiosError<unknown>;

export function useGetDepartments<TData = Awaited<ReturnType<typeof getDepartments>>, TError = AxiosError<unknown>>(
    params: undefined | GetDepartmentsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDepartments<TData = Awaited<ReturnType<typeof getDepartments>>, TError = AxiosError<unknown>>(
    params?: GetDepartmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDepartments<TData = Awaited<ReturnType<typeof getDepartments>>, TError = AxiosError<unknown>>(
    params?: GetDepartmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDepartments<TData = Awaited<ReturnType<typeof getDepartments>>, TError = AxiosError<unknown>>(
    params?: GetDepartmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDepartmentsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postDepartment = (
    department: Department,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Department>> => {
    return axios.default.post(`/api/Departments`, department, options);
};

export const getPostDepartmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDepartment>>, TError, { data: Department }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postDepartment>>, TError, { data: Department }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDepartment>>, { data: Department }> = (props) => {
        const { data } = props ?? {};

        return postDepartment(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostDepartmentMutationResult = NonNullable<Awaited<ReturnType<typeof postDepartment>>>;
export type PostDepartmentMutationBody = Department;
export type PostDepartmentMutationError = AxiosError<unknown>;

export const usePostDepartment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDepartment>>, TError, { data: Department }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postDepartment>>, TError, { data: Department }, TContext> => {
    const mutationOptions = getPostDepartmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDepartment = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Department>> => {
    return axios.default.get(`/api/Departments/${id}`, options);
};

export const getGetDepartmentQueryKey = (id: number) => {
    return [`/api/Departments/${id}`] as const;
};

export const getGetDepartmentQueryOptions = <
    TData = Awaited<ReturnType<typeof getDepartment>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDepartmentQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDepartment>>> = ({ signal }) =>
        getDepartment(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDepartment>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDepartmentQueryResult = NonNullable<Awaited<ReturnType<typeof getDepartment>>>;
export type GetDepartmentQueryError = AxiosError<unknown>;

export function useGetDepartment<TData = Awaited<ReturnType<typeof getDepartment>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDepartment<TData = Awaited<ReturnType<typeof getDepartment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDepartment<TData = Awaited<ReturnType<typeof getDepartment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDepartment<TData = Awaited<ReturnType<typeof getDepartment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDepartmentQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putDepartment = (
    id: number,
    department: Department,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Departments/${id}`, department, options);
};

export const getPutDepartmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDepartment>>,
        TError,
        { id: number; data: Department },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putDepartment>>,
    TError,
    { id: number; data: Department },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDepartment>>, { id: number; data: Department }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putDepartment(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutDepartmentMutationResult = NonNullable<Awaited<ReturnType<typeof putDepartment>>>;
export type PutDepartmentMutationBody = Department;
export type PutDepartmentMutationError = AxiosError<unknown>;

export const usePutDepartment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDepartment>>,
        TError,
        { id: number; data: Department },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putDepartment>>,
    TError,
    { id: number; data: Department },
    TContext
> => {
    const mutationOptions = getPutDepartmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteDepartment = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Departments/${id}`, options);
};

export const getDeleteDepartmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDepartment>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteDepartment>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDepartment>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteDepartment(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteDepartmentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDepartment>>>;

export type DeleteDepartmentMutationError = AxiosError<unknown>;

export const useDeleteDepartment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDepartment>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteDepartment>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteDepartmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDiagnoses = (
    params?: GetDiagnosesParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DiagnosisDTOPaginated>> => {
    return axios.default.get(`/api/Diagnoses`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetDiagnosesQueryKey = (params?: GetDiagnosesParams) => {
    return [`/api/Diagnoses`, ...(params ? [params] : [])] as const;
};

export const getGetDiagnosesQueryOptions = <
    TData = Awaited<ReturnType<typeof getDiagnoses>>,
    TError = AxiosError<unknown>,
>(
    params?: GetDiagnosesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDiagnosesQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDiagnoses>>> = ({ signal }) =>
        getDiagnoses(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDiagnoses>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDiagnosesQueryResult = NonNullable<Awaited<ReturnType<typeof getDiagnoses>>>;
export type GetDiagnosesQueryError = AxiosError<unknown>;

export function useGetDiagnoses<TData = Awaited<ReturnType<typeof getDiagnoses>>, TError = AxiosError<unknown>>(
    params: undefined | GetDiagnosesParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDiagnoses<TData = Awaited<ReturnType<typeof getDiagnoses>>, TError = AxiosError<unknown>>(
    params?: GetDiagnosesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDiagnoses<TData = Awaited<ReturnType<typeof getDiagnoses>>, TError = AxiosError<unknown>>(
    params?: GetDiagnosesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDiagnoses<TData = Awaited<ReturnType<typeof getDiagnoses>>, TError = AxiosError<unknown>>(
    params?: GetDiagnosesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDiagnosesQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postDiagnosis = (
    diagnosis: Diagnosis,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Diagnosis>> => {
    return axios.default.post(`/api/Diagnoses`, diagnosis, options);
};

export const getPostDiagnosisMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDiagnosis>>, TError, { data: Diagnosis }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postDiagnosis>>, TError, { data: Diagnosis }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDiagnosis>>, { data: Diagnosis }> = (props) => {
        const { data } = props ?? {};

        return postDiagnosis(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostDiagnosisMutationResult = NonNullable<Awaited<ReturnType<typeof postDiagnosis>>>;
export type PostDiagnosisMutationBody = Diagnosis;
export type PostDiagnosisMutationError = AxiosError<unknown>;

export const usePostDiagnosis = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDiagnosis>>, TError, { data: Diagnosis }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postDiagnosis>>, TError, { data: Diagnosis }, TContext> => {
    const mutationOptions = getPostDiagnosisMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDiagnosis = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DiagnosisDTO>> => {
    return axios.default.get(`/api/Diagnoses/${id}`, options);
};

export const getGetDiagnosisQueryKey = (id: number) => {
    return [`/api/Diagnoses/${id}`] as const;
};

export const getGetDiagnosisQueryOptions = <
    TData = Awaited<ReturnType<typeof getDiagnosis>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDiagnosisQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDiagnosis>>> = ({ signal }) =>
        getDiagnosis(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDiagnosis>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDiagnosisQueryResult = NonNullable<Awaited<ReturnType<typeof getDiagnosis>>>;
export type GetDiagnosisQueryError = AxiosError<unknown>;

export function useGetDiagnosis<TData = Awaited<ReturnType<typeof getDiagnosis>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDiagnosis<TData = Awaited<ReturnType<typeof getDiagnosis>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDiagnosis<TData = Awaited<ReturnType<typeof getDiagnosis>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDiagnosis<TData = Awaited<ReturnType<typeof getDiagnosis>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDiagnosisQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putDiagnosis = (
    id: number,
    diagnosis: Diagnosis,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Diagnoses/${id}`, diagnosis, options);
};

export const getPutDiagnosisMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDiagnosis>>,
        TError,
        { id: number; data: Diagnosis },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof putDiagnosis>>, TError, { id: number; data: Diagnosis }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDiagnosis>>, { id: number; data: Diagnosis }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putDiagnosis(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutDiagnosisMutationResult = NonNullable<Awaited<ReturnType<typeof putDiagnosis>>>;
export type PutDiagnosisMutationBody = Diagnosis;
export type PutDiagnosisMutationError = AxiosError<unknown>;

export const usePutDiagnosis = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDiagnosis>>,
        TError,
        { id: number; data: Diagnosis },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof putDiagnosis>>, TError, { id: number; data: Diagnosis }, TContext> => {
    const mutationOptions = getPutDiagnosisMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteDiagnosis = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Diagnoses/${id}`, options);
};

export const getDeleteDiagnosisMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDiagnosis>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteDiagnosis>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDiagnosis>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteDiagnosis(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteDiagnosisMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDiagnosis>>>;

export type DeleteDiagnosisMutationError = AxiosError<unknown>;

export const useDeleteDiagnosis = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDiagnosis>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteDiagnosis>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteDiagnosisMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDoctors = (
    params?: GetDoctorsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorDTOPaginated>> => {
    return axios.default.get(`/api/Doctors`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetDoctorsQueryKey = (params?: GetDoctorsParams) => {
    return [`/api/Doctors`, ...(params ? [params] : [])] as const;
};

export const getGetDoctorsQueryOptions = <TData = Awaited<ReturnType<typeof getDoctors>>, TError = AxiosError<unknown>>(
    params?: GetDoctorsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDoctorsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDoctors>>> = ({ signal }) =>
        getDoctors(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDoctors>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDoctorsQueryResult = NonNullable<Awaited<ReturnType<typeof getDoctors>>>;
export type GetDoctorsQueryError = AxiosError<unknown>;

export function useGetDoctors<TData = Awaited<ReturnType<typeof getDoctors>>, TError = AxiosError<unknown>>(
    params: undefined | GetDoctorsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctors<TData = Awaited<ReturnType<typeof getDoctors>>, TError = AxiosError<unknown>>(
    params?: GetDoctorsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctors<TData = Awaited<ReturnType<typeof getDoctors>>, TError = AxiosError<unknown>>(
    params?: GetDoctorsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDoctors<TData = Awaited<ReturnType<typeof getDoctors>>, TError = AxiosError<unknown>>(
    params?: GetDoctorsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDoctorsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postDoctor = (doctor: Doctor, options?: AxiosRequestConfig): Promise<AxiosResponse<Doctor>> => {
    return axios.default.post(`/api/Doctors`, doctor, options);
};

export const getPostDoctorMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDoctor>>, TError, { data: Doctor }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postDoctor>>, TError, { data: Doctor }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDoctor>>, { data: Doctor }> = (props) => {
        const { data } = props ?? {};

        return postDoctor(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostDoctorMutationResult = NonNullable<Awaited<ReturnType<typeof postDoctor>>>;
export type PostDoctorMutationBody = Doctor;
export type PostDoctorMutationError = AxiosError<unknown>;

export const usePostDoctor = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDoctor>>, TError, { data: Doctor }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postDoctor>>, TError, { data: Doctor }, TContext> => {
    const mutationOptions = getPostDoctorMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDoctor = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DoctorDTO>> => {
    return axios.default.get(`/api/Doctors/${id}`, options);
};

export const getGetDoctorQueryKey = (id: number) => {
    return [`/api/Doctors/${id}`] as const;
};

export const getGetDoctorQueryOptions = <TData = Awaited<ReturnType<typeof getDoctor>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDoctorQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDoctor>>> = ({ signal }) =>
        getDoctor(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDoctor>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDoctorQueryResult = NonNullable<Awaited<ReturnType<typeof getDoctor>>>;
export type GetDoctorQueryError = AxiosError<unknown>;

export function useGetDoctor<TData = Awaited<ReturnType<typeof getDoctor>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctor<TData = Awaited<ReturnType<typeof getDoctor>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctor<TData = Awaited<ReturnType<typeof getDoctor>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDoctor<TData = Awaited<ReturnType<typeof getDoctor>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDoctorQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putDoctor = (id: number, doctor: Doctor, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Doctors/${id}`, doctor, options);
};

export const getPutDoctorMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDoctor>>,
        TError,
        { id: number; data: Doctor },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof putDoctor>>, TError, { id: number; data: Doctor }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDoctor>>, { id: number; data: Doctor }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putDoctor(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutDoctorMutationResult = NonNullable<Awaited<ReturnType<typeof putDoctor>>>;
export type PutDoctorMutationBody = Doctor;
export type PutDoctorMutationError = AxiosError<unknown>;

export const usePutDoctor = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDoctor>>,
        TError,
        { id: number; data: Doctor },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof putDoctor>>, TError, { id: number; data: Doctor }, TContext> => {
    const mutationOptions = getPutDoctorMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteDoctor = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Doctors/${id}`, options);
};

export const getDeleteDoctorMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDoctor>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteDoctor>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDoctor>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteDoctor(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteDoctorMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDoctor>>>;

export type DeleteDoctorMutationError = AxiosError<unknown>;

export const useDeleteDoctor = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDoctor>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteDoctor>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteDoctorMutationOptions(options);

    return useMutation(mutationOptions);
};

export const doctorsRegister = (
    doctorRegistration: DoctorRegistration,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.post(`/api/Doctors/doctorregister`, doctorRegistration, options);
};

export const getDoctorsRegisterMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof doctorsRegister>>,
        TError,
        { data: DoctorRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof doctorsRegister>>, TError, { data: DoctorRegistration }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof doctorsRegister>>, { data: DoctorRegistration }> = (
        props
    ) => {
        const { data } = props ?? {};

        return doctorsRegister(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DoctorsRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof doctorsRegister>>>;
export type DoctorsRegisterMutationBody = DoctorRegistration;
export type DoctorsRegisterMutationError = AxiosError<unknown>;

export const useDoctorsRegister = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof doctorsRegister>>,
        TError,
        { data: DoctorRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof doctorsRegister>>, TError, { data: DoctorRegistration }, TContext> => {
    const mutationOptions = getDoctorsRegisterMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getAllDoctorSchedules = (
    params?: GetAllDoctorSchedulesParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorScheduleDTOPaginated>> => {
    return axios.default.get(`/api/DoctorSchedules`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetAllDoctorSchedulesQueryKey = (params?: GetAllDoctorSchedulesParams) => {
    return [`/api/DoctorSchedules`, ...(params ? [params] : [])] as const;
};

export const getGetAllDoctorSchedulesQueryOptions = <
    TData = Awaited<ReturnType<typeof getAllDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    params?: GetAllDoctorSchedulesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoctorSchedules>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetAllDoctorSchedulesQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDoctorSchedules>>> = ({ signal }) =>
        getAllDoctorSchedules(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getAllDoctorSchedules>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetAllDoctorSchedulesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDoctorSchedules>>>;
export type GetAllDoctorSchedulesQueryError = AxiosError<unknown>;

export function useGetAllDoctorSchedules<
    TData = Awaited<ReturnType<typeof getAllDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    params: undefined | GetAllDoctorSchedulesParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoctorSchedules>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getAllDoctorSchedules>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllDoctorSchedules<
    TData = Awaited<ReturnType<typeof getAllDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    params?: GetAllDoctorSchedulesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoctorSchedules>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAllDoctorSchedules>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllDoctorSchedules<
    TData = Awaited<ReturnType<typeof getAllDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    params?: GetAllDoctorSchedulesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoctorSchedules>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAllDoctorSchedules<
    TData = Awaited<ReturnType<typeof getAllDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    params?: GetAllDoctorSchedulesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoctorSchedules>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetAllDoctorSchedulesQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postDoctorSchedule = (
    doctorSchedule: DoctorSchedule,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorSchedule>> => {
    return axios.default.post(`/api/DoctorSchedules`, doctorSchedule, options);
};

export const getPostDoctorScheduleMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postDoctorSchedule>>,
        TError,
        { data: DoctorSchedule },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postDoctorSchedule>>, TError, { data: DoctorSchedule }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDoctorSchedule>>, { data: DoctorSchedule }> = (
        props
    ) => {
        const { data } = props ?? {};

        return postDoctorSchedule(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostDoctorScheduleMutationResult = NonNullable<Awaited<ReturnType<typeof postDoctorSchedule>>>;
export type PostDoctorScheduleMutationBody = DoctorSchedule;
export type PostDoctorScheduleMutationError = AxiosError<unknown>;

export const usePostDoctorSchedule = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postDoctorSchedule>>,
        TError,
        { data: DoctorSchedule },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postDoctorSchedule>>, TError, { data: DoctorSchedule }, TContext> => {
    const mutationOptions = getPostDoctorScheduleMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDoctorSchedule = (
    id: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorScheduleDTO>> => {
    return axios.default.get(`/api/DoctorSchedules/${id}`, options);
};

export const getGetDoctorScheduleQueryKey = (id: number) => {
    return [`/api/DoctorSchedules/${id}`] as const;
};

export const getGetDoctorScheduleQueryOptions = <
    TData = Awaited<ReturnType<typeof getDoctorSchedule>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDoctorScheduleQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDoctorSchedule>>> = ({ signal }) =>
        getDoctorSchedule(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDoctorSchedule>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDoctorScheduleQueryResult = NonNullable<Awaited<ReturnType<typeof getDoctorSchedule>>>;
export type GetDoctorScheduleQueryError = AxiosError<unknown>;

export function useGetDoctorSchedule<
    TData = Awaited<ReturnType<typeof getDoctorSchedule>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctorSchedule<
    TData = Awaited<ReturnType<typeof getDoctorSchedule>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctorSchedule<
    TData = Awaited<ReturnType<typeof getDoctorSchedule>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDoctorSchedule<
    TData = Awaited<ReturnType<typeof getDoctorSchedule>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDoctorScheduleQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putDoctorSchedule = (
    id: number,
    doctorScheduleCreateDTO: DoctorScheduleCreateDTO,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/DoctorSchedules/${id}`, doctorScheduleCreateDTO, options);
};

export const getPutDoctorScheduleMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDoctorSchedule>>,
        TError,
        { id: number; data: DoctorScheduleCreateDTO },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putDoctorSchedule>>,
    TError,
    { id: number; data: DoctorScheduleCreateDTO },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putDoctorSchedule>>,
        { id: number; data: DoctorScheduleCreateDTO }
    > = (props) => {
        const { id, data } = props ?? {};

        return putDoctorSchedule(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutDoctorScheduleMutationResult = NonNullable<Awaited<ReturnType<typeof putDoctorSchedule>>>;
export type PutDoctorScheduleMutationBody = DoctorScheduleCreateDTO;
export type PutDoctorScheduleMutationError = AxiosError<unknown>;

export const usePutDoctorSchedule = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDoctorSchedule>>,
        TError,
        { id: number; data: DoctorScheduleCreateDTO },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putDoctorSchedule>>,
    TError,
    { id: number; data: DoctorScheduleCreateDTO },
    TContext
> => {
    const mutationOptions = getPutDoctorScheduleMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteDoctorSchedule = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/DoctorSchedules/${id}`, options);
};

export const getDeleteDoctorScheduleMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDoctorSchedule>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteDoctorSchedule>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDoctorSchedule>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteDoctorSchedule(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteDoctorScheduleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDoctorSchedule>>>;

export type DeleteDoctorScheduleMutationError = AxiosError<unknown>;

export const useDeleteDoctorSchedule = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDoctorSchedule>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteDoctorSchedule>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteDoctorScheduleMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDoctorSchedules = (
    doctorId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorSchedule[]>> => {
    return axios.default.get(`/api/DoctorSchedules/doctor-schedule/${doctorId}`, options);
};

export const getGetDoctorSchedulesQueryKey = (doctorId: number) => {
    return [`/api/DoctorSchedules/doctor-schedule/${doctorId}`] as const;
};

export const getGetDoctorSchedulesQueryOptions = <
    TData = Awaited<ReturnType<typeof getDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDoctorSchedulesQueryKey(doctorId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDoctorSchedules>>> = ({ signal }) =>
        getDoctorSchedules(doctorId, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!doctorId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDoctorSchedules>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDoctorSchedulesQueryResult = NonNullable<Awaited<ReturnType<typeof getDoctorSchedules>>>;
export type GetDoctorSchedulesQueryError = AxiosError<unknown>;

export function useGetDoctorSchedules<
    TData = Awaited<ReturnType<typeof getDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctorSchedules<
    TData = Awaited<ReturnType<typeof getDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctorSchedules<
    TData = Awaited<ReturnType<typeof getDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDoctorSchedules<
    TData = Awaited<ReturnType<typeof getDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDoctorSchedulesQueryOptions(doctorId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const bulkCreateDoctorSchedules = (
    doctorSchedule: DoctorSchedule[],
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorSchedule>> => {
    return axios.default.post(`/api/DoctorSchedules/Bulk`, doctorSchedule, options);
};

export const getBulkCreateDoctorSchedulesMutationOptions = <
    TError = AxiosError<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof bulkCreateDoctorSchedules>>,
        TError,
        { data: DoctorSchedule[] },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof bulkCreateDoctorSchedules>>,
    TError,
    { data: DoctorSchedule[] },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof bulkCreateDoctorSchedules>>,
        { data: DoctorSchedule[] }
    > = (props) => {
        const { data } = props ?? {};

        return bulkCreateDoctorSchedules(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type BulkCreateDoctorSchedulesMutationResult = NonNullable<
    Awaited<ReturnType<typeof bulkCreateDoctorSchedules>>
>;
export type BulkCreateDoctorSchedulesMutationBody = DoctorSchedule[];
export type BulkCreateDoctorSchedulesMutationError = AxiosError<unknown>;

export const useBulkCreateDoctorSchedules = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof bulkCreateDoctorSchedules>>,
        TError,
        { data: DoctorSchedule[] },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof bulkCreateDoctorSchedules>>,
    TError,
    { data: DoctorSchedule[] },
    TContext
> => {
    const mutationOptions = getBulkCreateDoctorSchedulesMutationOptions(options);

    return useMutation(mutationOptions);
};

export const bulkUpdateDoctorSchedules = (
    doctorId: number,
    doctorScheduleCreateDTO: DoctorScheduleCreateDTO[],
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorSchedule>> => {
    return axios.default.post(`/api/DoctorSchedules/Bulk/${doctorId}`, doctorScheduleCreateDTO, options);
};

export const getBulkUpdateDoctorSchedulesMutationOptions = <
    TError = AxiosError<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof bulkUpdateDoctorSchedules>>,
        TError,
        { doctorId: number; data: DoctorScheduleCreateDTO[] },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof bulkUpdateDoctorSchedules>>,
    TError,
    { doctorId: number; data: DoctorScheduleCreateDTO[] },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof bulkUpdateDoctorSchedules>>,
        { doctorId: number; data: DoctorScheduleCreateDTO[] }
    > = (props) => {
        const { doctorId, data } = props ?? {};

        return bulkUpdateDoctorSchedules(doctorId, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type BulkUpdateDoctorSchedulesMutationResult = NonNullable<
    Awaited<ReturnType<typeof bulkUpdateDoctorSchedules>>
>;
export type BulkUpdateDoctorSchedulesMutationBody = DoctorScheduleCreateDTO[];
export type BulkUpdateDoctorSchedulesMutationError = AxiosError<unknown>;

export const useBulkUpdateDoctorSchedules = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof bulkUpdateDoctorSchedules>>,
        TError,
        { doctorId: number; data: DoctorScheduleCreateDTO[] },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof bulkUpdateDoctorSchedules>>,
    TError,
    { doctorId: number; data: DoctorScheduleCreateDTO[] },
    TContext
> => {
    const mutationOptions = getBulkUpdateDoctorSchedulesMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getEmergencyContacts = (options?: AxiosRequestConfig): Promise<AxiosResponse<EmergencyContact[]>> => {
    return axios.default.get(`/api/EmergencyContacts`, options);
};

export const getGetEmergencyContactsQueryKey = () => {
    return [`/api/EmergencyContacts`] as const;
};

export const getGetEmergencyContactsQueryOptions = <
    TData = Awaited<ReturnType<typeof getEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetEmergencyContactsQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmergencyContacts>>> = ({ signal }) =>
        getEmergencyContacts({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getEmergencyContacts>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetEmergencyContactsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmergencyContacts>>>;
export type GetEmergencyContactsQueryError = AxiosError<unknown>;

export function useGetEmergencyContacts<
    TData = Awaited<ReturnType<typeof getEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEmergencyContacts<
    TData = Awaited<ReturnType<typeof getEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>,
            'initialData'
        >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEmergencyContacts<
    TData = Awaited<ReturnType<typeof getEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetEmergencyContacts<
    TData = Awaited<ReturnType<typeof getEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetEmergencyContactsQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postEmergencyContact = (
    emergencyContact: EmergencyContact,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<EmergencyContact>> => {
    return axios.default.post(`/api/EmergencyContacts`, emergencyContact, options);
};

export const getPostEmergencyContactMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postEmergencyContact>>,
        TError,
        { data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postEmergencyContact>>,
    TError,
    { data: EmergencyContact },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmergencyContact>>, { data: EmergencyContact }> = (
        props
    ) => {
        const { data } = props ?? {};

        return postEmergencyContact(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostEmergencyContactMutationResult = NonNullable<Awaited<ReturnType<typeof postEmergencyContact>>>;
export type PostEmergencyContactMutationBody = EmergencyContact;
export type PostEmergencyContactMutationError = AxiosError<unknown>;

export const usePostEmergencyContact = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postEmergencyContact>>,
        TError,
        { data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof postEmergencyContact>>,
    TError,
    { data: EmergencyContact },
    TContext
> => {
    const mutationOptions = getPostEmergencyContactMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getEmergencyContact = (
    id: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<EmergencyContact>> => {
    return axios.default.get(`/api/EmergencyContacts/${id}`, options);
};

export const getGetEmergencyContactQueryKey = (id: number) => {
    return [`/api/EmergencyContacts/${id}`] as const;
};

export const getGetEmergencyContactQueryOptions = <
    TData = Awaited<ReturnType<typeof getEmergencyContact>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetEmergencyContactQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmergencyContact>>> = ({ signal }) =>
        getEmergencyContact(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getEmergencyContact>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetEmergencyContactQueryResult = NonNullable<Awaited<ReturnType<typeof getEmergencyContact>>>;
export type GetEmergencyContactQueryError = AxiosError<unknown>;

export function useGetEmergencyContact<
    TData = Awaited<ReturnType<typeof getEmergencyContact>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEmergencyContact<
    TData = Awaited<ReturnType<typeof getEmergencyContact>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEmergencyContact<
    TData = Awaited<ReturnType<typeof getEmergencyContact>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetEmergencyContact<
    TData = Awaited<ReturnType<typeof getEmergencyContact>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetEmergencyContactQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putEmergencyContact = (
    id: number,
    emergencyContact: EmergencyContact,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/EmergencyContacts/${id}`, emergencyContact, options);
};

export const getPutEmergencyContactMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putEmergencyContact>>,
        TError,
        { id: number; data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putEmergencyContact>>,
    TError,
    { id: number; data: EmergencyContact },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putEmergencyContact>>,
        { id: number; data: EmergencyContact }
    > = (props) => {
        const { id, data } = props ?? {};

        return putEmergencyContact(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutEmergencyContactMutationResult = NonNullable<Awaited<ReturnType<typeof putEmergencyContact>>>;
export type PutEmergencyContactMutationBody = EmergencyContact;
export type PutEmergencyContactMutationError = AxiosError<unknown>;

export const usePutEmergencyContact = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putEmergencyContact>>,
        TError,
        { id: number; data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putEmergencyContact>>,
    TError,
    { id: number; data: EmergencyContact },
    TContext
> => {
    const mutationOptions = getPutEmergencyContactMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteEmergencyContact = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/EmergencyContacts/${id}`, options);
};

export const getDeleteEmergencyContactMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEmergencyContact>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteEmergencyContact>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmergencyContact>>, { id: number }> = (
        props
    ) => {
        const { id } = props ?? {};

        return deleteEmergencyContact(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteEmergencyContactMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmergencyContact>>>;

export type DeleteEmergencyContactMutationError = AxiosError<unknown>;

export const useDeleteEmergencyContact = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEmergencyContact>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteEmergencyContact>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteEmergencyContactMutationOptions(options);

    return useMutation(mutationOptions);
};

export const uploadFile = (
    uploadFileBody: UploadFileBody,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
    const formData = new FormData();
    if (uploadFileBody.file !== undefined) {
        formData.append('file', uploadFileBody.file);
    }

    return axios.default.post(`/api/File/UploadFile`, formData, options);
};

export const getUploadFileMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError, { data: UploadFileBody }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError, { data: UploadFileBody }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadFile>>, { data: UploadFileBody }> = (props) => {
        const { data } = props ?? {};

        return uploadFile(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type UploadFileMutationResult = NonNullable<Awaited<ReturnType<typeof uploadFile>>>;
export type UploadFileMutationBody = UploadFileBody;
export type UploadFileMutationError = AxiosError<unknown>;

export const useUploadFile = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError, { data: UploadFileBody }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof uploadFile>>, TError, { data: UploadFileBody }, TContext> => {
    const mutationOptions = getUploadFileMutationOptions(options);

    return useMutation(mutationOptions);
};

export const viewFile = (fileName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.get(`/api/File/ViewFile/${fileName}`, options);
};

export const getViewFileQueryKey = (fileName: string) => {
    return [`/api/File/ViewFile/${fileName}`] as const;
};

export const getViewFileQueryOptions = <TData = Awaited<ReturnType<typeof viewFile>>, TError = AxiosError<unknown>>(
    fileName: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof viewFile>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getViewFileQueryKey(fileName);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof viewFile>>> = ({ signal }) =>
        viewFile(fileName, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!fileName, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof viewFile>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type ViewFileQueryResult = NonNullable<Awaited<ReturnType<typeof viewFile>>>;
export type ViewFileQueryError = AxiosError<unknown>;

export function useViewFile<TData = Awaited<ReturnType<typeof viewFile>>, TError = AxiosError<unknown>>(
    fileName: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof viewFile>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof viewFile>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useViewFile<TData = Awaited<ReturnType<typeof viewFile>>, TError = AxiosError<unknown>>(
    fileName: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof viewFile>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof viewFile>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useViewFile<TData = Awaited<ReturnType<typeof viewFile>>, TError = AxiosError<unknown>>(
    fileName: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof viewFile>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useViewFile<TData = Awaited<ReturnType<typeof viewFile>>, TError = AxiosError<unknown>>(
    fileName: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof viewFile>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getViewFileQueryOptions(fileName, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const downloadFile = (
    params?: DownloadFileParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.get(`/api/File/DownloadFile`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getDownloadFileQueryKey = (params?: DownloadFileParams) => {
    return [`/api/File/DownloadFile`, ...(params ? [params] : [])] as const;
};

export const getDownloadFileQueryOptions = <
    TData = Awaited<ReturnType<typeof downloadFile>>,
    TError = AxiosError<unknown>,
>(
    params?: DownloadFileParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getDownloadFileQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadFile>>> = ({ signal }) =>
        downloadFile(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof downloadFile>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type DownloadFileQueryResult = NonNullable<Awaited<ReturnType<typeof downloadFile>>>;
export type DownloadFileQueryError = AxiosError<unknown>;

export function useDownloadFile<TData = Awaited<ReturnType<typeof downloadFile>>, TError = AxiosError<unknown>>(
    params: undefined | DownloadFileParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDownloadFile<TData = Awaited<ReturnType<typeof downloadFile>>, TError = AxiosError<unknown>>(
    params?: DownloadFileParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDownloadFile<TData = Awaited<ReturnType<typeof downloadFile>>, TError = AxiosError<unknown>>(
    params?: DownloadFileParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useDownloadFile<TData = Awaited<ReturnType<typeof downloadFile>>, TError = AxiosError<unknown>>(
    params?: DownloadFileParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getDownloadFileQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getInvoices = (
    params?: GetInvoicesParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<InvoicePaginated>> => {
    return axios.default.get(`/api/Invoices`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetInvoicesQueryKey = (params?: GetInvoicesParams) => {
    return [`/api/Invoices`, ...(params ? [params] : [])] as const;
};

export const getGetInvoicesQueryOptions = <
    TData = Awaited<ReturnType<typeof getInvoices>>,
    TError = AxiosError<unknown>,
>(
    params?: GetInvoicesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetInvoicesQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInvoices>>> = ({ signal }) =>
        getInvoices(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getInvoices>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetInvoicesQueryResult = NonNullable<Awaited<ReturnType<typeof getInvoices>>>;
export type GetInvoicesQueryError = AxiosError<unknown>;

export function useGetInvoices<TData = Awaited<ReturnType<typeof getInvoices>>, TError = AxiosError<unknown>>(
    params: undefined | GetInvoicesParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetInvoices<TData = Awaited<ReturnType<typeof getInvoices>>, TError = AxiosError<unknown>>(
    params?: GetInvoicesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetInvoices<TData = Awaited<ReturnType<typeof getInvoices>>, TError = AxiosError<unknown>>(
    params?: GetInvoicesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetInvoices<TData = Awaited<ReturnType<typeof getInvoices>>, TError = AxiosError<unknown>>(
    params?: GetInvoicesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetInvoicesQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postInvoice = (invoice: Invoice, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> => {
    return axios.default.post(`/api/Invoices`, invoice, options);
};

export const getPostInvoiceMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postInvoice>>, TError, { data: Invoice }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postInvoice>>, TError, { data: Invoice }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postInvoice>>, { data: Invoice }> = (props) => {
        const { data } = props ?? {};

        return postInvoice(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostInvoiceMutationResult = NonNullable<Awaited<ReturnType<typeof postInvoice>>>;
export type PostInvoiceMutationBody = Invoice;
export type PostInvoiceMutationError = AxiosError<unknown>;

export const usePostInvoice = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postInvoice>>, TError, { data: Invoice }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postInvoice>>, TError, { data: Invoice }, TContext> => {
    const mutationOptions = getPostInvoiceMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getInvoice = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> => {
    return axios.default.get(`/api/Invoices/${id}`, options);
};

export const getGetInvoiceQueryKey = (id: number) => {
    return [`/api/Invoices/${id}`] as const;
};

export const getGetInvoiceQueryOptions = <TData = Awaited<ReturnType<typeof getInvoice>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetInvoiceQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInvoice>>> = ({ signal }) =>
        getInvoice(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getInvoice>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetInvoiceQueryResult = NonNullable<Awaited<ReturnType<typeof getInvoice>>>;
export type GetInvoiceQueryError = AxiosError<unknown>;

export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetInvoiceQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putInvoice = (
    id: number,
    invoice: Invoice,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Invoices/${id}`, invoice, options);
};

export const getPutInvoiceMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putInvoice>>,
        TError,
        { id: number; data: Invoice },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof putInvoice>>, TError, { id: number; data: Invoice }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putInvoice>>, { id: number; data: Invoice }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putInvoice(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutInvoiceMutationResult = NonNullable<Awaited<ReturnType<typeof putInvoice>>>;
export type PutInvoiceMutationBody = Invoice;
export type PutInvoiceMutationError = AxiosError<unknown>;

export const usePutInvoice = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putInvoice>>,
        TError,
        { id: number; data: Invoice },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof putInvoice>>, TError, { id: number; data: Invoice }, TContext> => {
    const mutationOptions = getPutInvoiceMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteInvoice = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Invoices/${id}`, options);
};

export const getDeleteInvoiceMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteInvoice>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteInvoice>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteInvoice>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteInvoice(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteInvoiceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteInvoice>>>;

export type DeleteInvoiceMutationError = AxiosError<unknown>;

export const useDeleteInvoice = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteInvoice>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteInvoice>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteInvoiceMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getPatients = (
    params?: GetPatientsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<PatientDTOPaginated>> => {
    return axios.default.get(`/api/Patients`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetPatientsQueryKey = (params?: GetPatientsParams) => {
    return [`/api/Patients`, ...(params ? [params] : [])] as const;
};

export const getGetPatientsQueryOptions = <
    TData = Awaited<ReturnType<typeof getPatients>>,
    TError = AxiosError<unknown>,
>(
    params?: GetPatientsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetPatientsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPatients>>> = ({ signal }) =>
        getPatients(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getPatients>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetPatientsQueryResult = NonNullable<Awaited<ReturnType<typeof getPatients>>>;
export type GetPatientsQueryError = AxiosError<unknown>;

export function useGetPatients<TData = Awaited<ReturnType<typeof getPatients>>, TError = AxiosError<unknown>>(
    params: undefined | GetPatientsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPatients<TData = Awaited<ReturnType<typeof getPatients>>, TError = AxiosError<unknown>>(
    params?: GetPatientsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPatients<TData = Awaited<ReturnType<typeof getPatients>>, TError = AxiosError<unknown>>(
    params?: GetPatientsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPatients<TData = Awaited<ReturnType<typeof getPatients>>, TError = AxiosError<unknown>>(
    params?: GetPatientsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetPatientsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postPatient = (patient: Patient, options?: AxiosRequestConfig): Promise<AxiosResponse<Patient>> => {
    return axios.default.post(`/api/Patients`, patient, options);
};

export const getPostPatientMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postPatient>>, TError, { data: Patient }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postPatient>>, TError, { data: Patient }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPatient>>, { data: Patient }> = (props) => {
        const { data } = props ?? {};

        return postPatient(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostPatientMutationResult = NonNullable<Awaited<ReturnType<typeof postPatient>>>;
export type PostPatientMutationBody = Patient;
export type PostPatientMutationError = AxiosError<unknown>;

export const usePostPatient = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postPatient>>, TError, { data: Patient }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postPatient>>, TError, { data: Patient }, TContext> => {
    const mutationOptions = getPostPatientMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getPatient = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Patient>> => {
    return axios.default.get(`/api/Patients/${id}`, options);
};

export const getGetPatientQueryKey = (id: number) => {
    return [`/api/Patients/${id}`] as const;
};

export const getGetPatientQueryOptions = <TData = Awaited<ReturnType<typeof getPatient>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetPatientQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPatient>>> = ({ signal }) =>
        getPatient(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getPatient>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetPatientQueryResult = NonNullable<Awaited<ReturnType<typeof getPatient>>>;
export type GetPatientQueryError = AxiosError<unknown>;

export function useGetPatient<TData = Awaited<ReturnType<typeof getPatient>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPatient<TData = Awaited<ReturnType<typeof getPatient>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPatient<TData = Awaited<ReturnType<typeof getPatient>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPatient<TData = Awaited<ReturnType<typeof getPatient>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetPatientQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putPatient = (
    id: number,
    patient: Patient,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Patients/${id}`, patient, options);
};

export const getPutPatientMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putPatient>>,
        TError,
        { id: number; data: Patient },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof putPatient>>, TError, { id: number; data: Patient }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putPatient>>, { id: number; data: Patient }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putPatient(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutPatientMutationResult = NonNullable<Awaited<ReturnType<typeof putPatient>>>;
export type PutPatientMutationBody = Patient;
export type PutPatientMutationError = AxiosError<unknown>;

export const usePutPatient = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putPatient>>,
        TError,
        { id: number; data: Patient },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof putPatient>>, TError, { id: number; data: Patient }, TContext> => {
    const mutationOptions = getPutPatientMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deletePatient = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Patients/${id}`, options);
};

export const getDeletePatientMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deletePatient>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deletePatient>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePatient>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deletePatient(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeletePatientMutationResult = NonNullable<Awaited<ReturnType<typeof deletePatient>>>;

export type DeletePatientMutationError = AxiosError<unknown>;

export const useDeletePatient = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deletePatient>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deletePatient>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeletePatientMutationOptions(options);

    return useMutation(mutationOptions);
};

export const patientRegister = (
    patientRegistration: PatientRegistration,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.post(`/api/Patients/patientregister`, patientRegistration, options);
};

export const getPatientRegisterMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patientRegister>>,
        TError,
        { data: PatientRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof patientRegister>>,
    TError,
    { data: PatientRegistration },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof patientRegister>>, { data: PatientRegistration }> = (
        props
    ) => {
        const { data } = props ?? {};

        return patientRegister(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PatientRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof patientRegister>>>;
export type PatientRegisterMutationBody = PatientRegistration;
export type PatientRegisterMutationError = AxiosError<unknown>;

export const usePatientRegister = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patientRegister>>,
        TError,
        { data: PatientRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof patientRegister>>, TError, { data: PatientRegistration }, TContext> => {
    const mutationOptions = getPatientRegisterMutationOptions(options);

    return useMutation(mutationOptions);
};

export const openTicket = (
    params?: OpenTicketParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<TicketDTO>> => {
    return axios.default.post(`/api/Ticket/OpenTicket`, undefined, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getOpenTicketMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof openTicket>>,
        TError,
        { params?: OpenTicketParams },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof openTicket>>, TError, { params?: OpenTicketParams }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof openTicket>>, { params?: OpenTicketParams }> = (
        props
    ) => {
        const { params } = props ?? {};

        return openTicket(params, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type OpenTicketMutationResult = NonNullable<Awaited<ReturnType<typeof openTicket>>>;

export type OpenTicketMutationError = AxiosError<unknown>;

export const useOpenTicket = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof openTicket>>,
        TError,
        { params?: OpenTicketParams },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof openTicket>>, TError, { params?: OpenTicketParams }, TContext> => {
    const mutationOptions = getOpenTicketMutationOptions(options);

    return useMutation(mutationOptions);
};

export const assignDoctor = (
    params?: AssignDoctorParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Ticket>> => {
    return axios.default.post(`/api/Ticket/AssignDoctor`, undefined, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getAssignDoctorMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof assignDoctor>>,
        TError,
        { params?: AssignDoctorParams },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof assignDoctor>>, TError, { params?: AssignDoctorParams }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof assignDoctor>>, { params?: AssignDoctorParams }> = (
        props
    ) => {
        const { params } = props ?? {};

        return assignDoctor(params, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type AssignDoctorMutationResult = NonNullable<Awaited<ReturnType<typeof assignDoctor>>>;

export type AssignDoctorMutationError = AxiosError<unknown>;

export const useAssignDoctor = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof assignDoctor>>,
        TError,
        { params?: AssignDoctorParams },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof assignDoctor>>, TError, { params?: AssignDoctorParams }, TContext> => {
    const mutationOptions = getAssignDoctorMutationOptions(options);

    return useMutation(mutationOptions);
};

export const closeTicket = (
    params?: CloseTicketParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Ticket>> => {
    return axios.default.post(`/api/Ticket/CloseTicket`, undefined, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getCloseTicketMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof closeTicket>>,
        TError,
        { params?: CloseTicketParams },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof closeTicket>>, TError, { params?: CloseTicketParams }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof closeTicket>>, { params?: CloseTicketParams }> = (
        props
    ) => {
        const { params } = props ?? {};

        return closeTicket(params, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type CloseTicketMutationResult = NonNullable<Awaited<ReturnType<typeof closeTicket>>>;

export type CloseTicketMutationError = AxiosError<unknown>;

export const useCloseTicket = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof closeTicket>>,
        TError,
        { params?: CloseTicketParams },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof closeTicket>>, TError, { params?: CloseTicketParams }, TContext> => {
    const mutationOptions = getCloseTicketMutationOptions(options);

    return useMutation(mutationOptions);
};

export const sendMessage = (
    params?: SendMessageParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Message>> => {
    return axios.default.post(`/api/Ticket/SendMessage`, undefined, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getSendMessageMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof sendMessage>>,
        TError,
        { params?: SendMessageParams },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof sendMessage>>, TError, { params?: SendMessageParams }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendMessage>>, { params?: SendMessageParams }> = (
        props
    ) => {
        const { params } = props ?? {};

        return sendMessage(params, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type SendMessageMutationResult = NonNullable<Awaited<ReturnType<typeof sendMessage>>>;

export type SendMessageMutationError = AxiosError<unknown>;

export const useSendMessage = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof sendMessage>>,
        TError,
        { params?: SendMessageParams },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof sendMessage>>, TError, { params?: SendMessageParams }, TContext> => {
    const mutationOptions = getSendMessageMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getMessages = (
    ticketId: string,
    params?: GetMessagesParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<MessageDTOPaginated>> => {
    return axios.default.get(`/api/Ticket/${ticketId}/Messages`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetMessagesQueryKey = (ticketId: string, params?: GetMessagesParams) => {
    return [`/api/Ticket/${ticketId}/Messages`, ...(params ? [params] : [])] as const;
};

export const getGetMessagesQueryOptions = <
    TData = Awaited<ReturnType<typeof getMessages>>,
    TError = AxiosError<unknown>,
>(
    ticketId: string,
    params?: GetMessagesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetMessagesQueryKey(ticketId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMessages>>> = ({ signal }) =>
        getMessages(ticketId, params, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!ticketId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getMessages>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getMessages>>>;
export type GetMessagesQueryError = AxiosError<unknown>;

export function useGetMessages<TData = Awaited<ReturnType<typeof getMessages>>, TError = AxiosError<unknown>>(
    ticketId: string,
    params: undefined | GetMessagesParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetMessages<TData = Awaited<ReturnType<typeof getMessages>>, TError = AxiosError<unknown>>(
    ticketId: string,
    params?: GetMessagesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetMessages<TData = Awaited<ReturnType<typeof getMessages>>, TError = AxiosError<unknown>>(
    ticketId: string,
    params?: GetMessagesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetMessages<TData = Awaited<ReturnType<typeof getMessages>>, TError = AxiosError<unknown>>(
    ticketId: string,
    params?: GetMessagesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetMessagesQueryOptions(ticketId, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getTicket = (ticketId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TicketDTO>> => {
    return axios.default.get(`/api/Ticket/${ticketId}`, options);
};

export const getGetTicketQueryKey = (ticketId: string) => {
    return [`/api/Ticket/${ticketId}`] as const;
};

export const getGetTicketQueryOptions = <TData = Awaited<ReturnType<typeof getTicket>>, TError = AxiosError<unknown>>(
    ticketId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicket>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetTicketQueryKey(ticketId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTicket>>> = ({ signal }) =>
        getTicket(ticketId, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!ticketId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getTicket>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetTicketQueryResult = NonNullable<Awaited<ReturnType<typeof getTicket>>>;
export type GetTicketQueryError = AxiosError<unknown>;

export function useGetTicket<TData = Awaited<ReturnType<typeof getTicket>>, TError = AxiosError<unknown>>(
    ticketId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicket>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getTicket>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetTicket<TData = Awaited<ReturnType<typeof getTicket>>, TError = AxiosError<unknown>>(
    ticketId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicket>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getTicket>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetTicket<TData = Awaited<ReturnType<typeof getTicket>>, TError = AxiosError<unknown>>(
    ticketId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicket>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetTicket<TData = Awaited<ReturnType<typeof getTicket>>, TError = AxiosError<unknown>>(
    ticketId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicket>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetTicketQueryOptions(ticketId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getDoctorTickets = (
    params?: GetDoctorTicketsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<TicketPaginated>> => {
    return axios.default.get(`/api/Ticket/DoctorTickets`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetDoctorTicketsQueryKey = (params?: GetDoctorTicketsParams) => {
    return [`/api/Ticket/DoctorTickets`, ...(params ? [params] : [])] as const;
};

export const getGetDoctorTicketsQueryOptions = <
    TData = Awaited<ReturnType<typeof getDoctorTickets>>,
    TError = AxiosError<unknown>,
>(
    params?: GetDoctorTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorTickets>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDoctorTicketsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDoctorTickets>>> = ({ signal }) =>
        getDoctorTickets(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDoctorTickets>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDoctorTicketsQueryResult = NonNullable<Awaited<ReturnType<typeof getDoctorTickets>>>;
export type GetDoctorTicketsQueryError = AxiosError<unknown>;

export function useGetDoctorTickets<TData = Awaited<ReturnType<typeof getDoctorTickets>>, TError = AxiosError<unknown>>(
    params: undefined | GetDoctorTicketsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorTickets>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctorTickets>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctorTickets<TData = Awaited<ReturnType<typeof getDoctorTickets>>, TError = AxiosError<unknown>>(
    params?: GetDoctorTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorTickets>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctorTickets>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctorTickets<TData = Awaited<ReturnType<typeof getDoctorTickets>>, TError = AxiosError<unknown>>(
    params?: GetDoctorTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorTickets>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDoctorTickets<TData = Awaited<ReturnType<typeof getDoctorTickets>>, TError = AxiosError<unknown>>(
    params?: GetDoctorTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorTickets>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDoctorTicketsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const readMessage = (messageId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Message>> => {
    return axios.default.post(`/api/Ticket/${messageId}/Read`, undefined, options);
};

export const getReadMessageMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof readMessage>>, TError, { messageId: string }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof readMessage>>, TError, { messageId: string }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof readMessage>>, { messageId: string }> = (props) => {
        const { messageId } = props ?? {};

        return readMessage(messageId, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type ReadMessageMutationResult = NonNullable<Awaited<ReturnType<typeof readMessage>>>;

export type ReadMessageMutationError = AxiosError<unknown>;

export const useReadMessage = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof readMessage>>, TError, { messageId: string }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof readMessage>>, TError, { messageId: string }, TContext> => {
    const mutationOptions = getReadMessageMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getPatientTickets = (
    params?: GetPatientTicketsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Ticket[]>> => {
    return axios.default.get(`/api/Ticket/PatientTickets`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetPatientTicketsQueryKey = (params?: GetPatientTicketsParams) => {
    return [`/api/Ticket/PatientTickets`, ...(params ? [params] : [])] as const;
};

export const getGetPatientTicketsQueryOptions = <
    TData = Awaited<ReturnType<typeof getPatientTickets>>,
    TError = AxiosError<unknown>,
>(
    params?: GetPatientTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientTickets>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetPatientTicketsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPatientTickets>>> = ({ signal }) =>
        getPatientTickets(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getPatientTickets>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetPatientTicketsQueryResult = NonNullable<Awaited<ReturnType<typeof getPatientTickets>>>;
export type GetPatientTicketsQueryError = AxiosError<unknown>;

export function useGetPatientTickets<
    TData = Awaited<ReturnType<typeof getPatientTickets>>,
    TError = AxiosError<unknown>,
>(
    params: undefined | GetPatientTicketsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientTickets>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getPatientTickets>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPatientTickets<
    TData = Awaited<ReturnType<typeof getPatientTickets>>,
    TError = AxiosError<unknown>,
>(
    params?: GetPatientTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientTickets>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getPatientTickets>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPatientTickets<
    TData = Awaited<ReturnType<typeof getPatientTickets>>,
    TError = AxiosError<unknown>,
>(
    params?: GetPatientTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientTickets>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPatientTickets<
    TData = Awaited<ReturnType<typeof getPatientTickets>>,
    TError = AxiosError<unknown>,
>(
    params?: GetPatientTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientTickets>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetPatientTicketsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getUnAssignedTickets = (
    params?: GetUnAssignedTicketsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Ticket[]>> => {
    return axios.default.get(`/api/Ticket/UnAssignedTickets`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetUnAssignedTicketsQueryKey = (params?: GetUnAssignedTicketsParams) => {
    return [`/api/Ticket/UnAssignedTickets`, ...(params ? [params] : [])] as const;
};

export const getGetUnAssignedTicketsQueryOptions = <
    TData = Awaited<ReturnType<typeof getUnAssignedTickets>>,
    TError = AxiosError<unknown>,
>(
    params?: GetUnAssignedTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnAssignedTickets>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetUnAssignedTicketsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUnAssignedTickets>>> = ({ signal }) =>
        getUnAssignedTickets(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getUnAssignedTickets>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetUnAssignedTicketsQueryResult = NonNullable<Awaited<ReturnType<typeof getUnAssignedTickets>>>;
export type GetUnAssignedTicketsQueryError = AxiosError<unknown>;

export function useGetUnAssignedTickets<
    TData = Awaited<ReturnType<typeof getUnAssignedTickets>>,
    TError = AxiosError<unknown>,
>(
    params: undefined | GetUnAssignedTicketsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnAssignedTickets>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getUnAssignedTickets>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUnAssignedTickets<
    TData = Awaited<ReturnType<typeof getUnAssignedTickets>>,
    TError = AxiosError<unknown>,
>(
    params?: GetUnAssignedTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnAssignedTickets>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getUnAssignedTickets>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUnAssignedTickets<
    TData = Awaited<ReturnType<typeof getUnAssignedTickets>>,
    TError = AxiosError<unknown>,
>(
    params?: GetUnAssignedTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnAssignedTickets>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetUnAssignedTickets<
    TData = Awaited<ReturnType<typeof getUnAssignedTickets>>,
    TError = AxiosError<unknown>,
>(
    params?: GetUnAssignedTicketsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnAssignedTickets>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetUnAssignedTicketsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const get = (options?: AxiosRequestConfig): Promise<AxiosResponse<WeatherForecast[]>> => {
    return axios.default.get(`/WeatherForecast`, options);
};

export const getGetQueryKey = () => {
    return [`/WeatherForecast`] as const;
};

export const getGetQueryOptions = <TData = Awaited<ReturnType<typeof get>>, TError = AxiosError<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({ signal }) => get({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData> & {
        queryKey: QueryKey;
    };
};

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>;
export type GetQueryError = AxiosError<unknown>;

export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = AxiosError<unknown>>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof get>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = AxiosError<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof get>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = AxiosError<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = AxiosError<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
