/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Hopital Management System Api
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
    Appointment,
    Department,
    DepartmentDTOPaginated,
    Diagnosis,
    Doctor,
    DoctorDTO,
    DoctorDTOPaginated,
    DoctorRegistration,
    DoctorSchedule,
    EmergencyContact,
    GetDepartmentsParams,
    GetDoctorsParams,
    Invoice,
    LoginModel,
    Patient,
    PatientRegistration,
    WeatherForecast,
} from '../../types';

export const login = (loginModel: LoginModel, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.post(`/api/Account/Login`, loginModel, options);
};

export const getLoginMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginModel }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginModel }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, { data: LoginModel }> = (props) => {
        const { data } = props ?? {};

        return login(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type LoginMutationBody = LoginModel;
export type LoginMutationError = AxiosError<unknown>;

export const useLogin = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginModel }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof login>>, TError, { data: LoginModel }, TContext> => {
    const mutationOptions = getLoginMutationOptions(options);

    return useMutation(mutationOptions);
};

export const logout = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.post(`/api/Account/Logout`, undefined, options);
};

export const getLogoutMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError, void, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError, void, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof logout>>, void> = () => {
        return logout(axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof logout>>>;

export type LogoutMutationError = AxiosError<unknown>;

export const useLogout = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError, void, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof logout>>, TError, void, TContext> => {
    const mutationOptions = getLogoutMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getCurrentUser = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.get(`/api/Account/@Me`, options);
};

export const getGetCurrentUserQueryKey = () => {
    return [`/api/Account/@Me`] as const;
};

export const getGetCurrentUserQueryOptions = <
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({ signal }) =>
        getCurrentUser({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUser>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>;
export type GetCurrentUserQueryError = AxiosError<unknown>;

export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetCurrentUserQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getAppointments = (options?: AxiosRequestConfig): Promise<AxiosResponse<Appointment[]>> => {
    return axios.default.get(`/api/Appointments`, options);
};

export const getGetAppointmentsQueryKey = () => {
    return [`/api/Appointments`] as const;
};

export const getGetAppointmentsQueryOptions = <
    TData = Awaited<ReturnType<typeof getAppointments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetAppointmentsQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppointments>>> = ({ signal }) =>
        getAppointments({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getAppointments>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetAppointmentsQueryResult = NonNullable<Awaited<ReturnType<typeof getAppointments>>>;
export type GetAppointmentsQueryError = AxiosError<unknown>;

export function useGetAppointments<
    TData = Awaited<ReturnType<typeof getAppointments>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointments<
    TData = Awaited<ReturnType<typeof getAppointments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointments<
    TData = Awaited<ReturnType<typeof getAppointments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAppointments<
    TData = Awaited<ReturnType<typeof getAppointments>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetAppointmentsQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postAppointment = (
    appointment: Appointment,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Appointment>> => {
    return axios.default.post(`/api/Appointments`, appointment, options);
};

export const getPostAppointmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAppointment>>, TError, { data: Appointment }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postAppointment>>, TError, { data: Appointment }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAppointment>>, { data: Appointment }> = (
        props
    ) => {
        const { data } = props ?? {};

        return postAppointment(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostAppointmentMutationResult = NonNullable<Awaited<ReturnType<typeof postAppointment>>>;
export type PostAppointmentMutationBody = Appointment;
export type PostAppointmentMutationError = AxiosError<unknown>;

export const usePostAppointment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAppointment>>, TError, { data: Appointment }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postAppointment>>, TError, { data: Appointment }, TContext> => {
    const mutationOptions = getPostAppointmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getAppointment = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Appointment>> => {
    return axios.default.get(`/api/Appointments/${id}`, options);
};

export const getGetAppointmentQueryKey = (id: number) => {
    return [`/api/Appointments/${id}`] as const;
};

export const getGetAppointmentQueryOptions = <
    TData = Awaited<ReturnType<typeof getAppointment>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetAppointmentQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppointment>>> = ({ signal }) =>
        getAppointment(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getAppointment>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetAppointmentQueryResult = NonNullable<Awaited<ReturnType<typeof getAppointment>>>;
export type GetAppointmentQueryError = AxiosError<unknown>;

export function useGetAppointment<TData = Awaited<ReturnType<typeof getAppointment>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointment<TData = Awaited<ReturnType<typeof getAppointment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointment<TData = Awaited<ReturnType<typeof getAppointment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAppointment<TData = Awaited<ReturnType<typeof getAppointment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetAppointmentQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putAppointment = (
    id: number,
    appointment: Appointment,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Appointments/${id}`, appointment, options);
};

export const getPutAppointmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putAppointment>>,
        TError,
        { id: number; data: Appointment },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putAppointment>>,
    TError,
    { id: number; data: Appointment },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putAppointment>>,
        { id: number; data: Appointment }
    > = (props) => {
        const { id, data } = props ?? {};

        return putAppointment(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutAppointmentMutationResult = NonNullable<Awaited<ReturnType<typeof putAppointment>>>;
export type PutAppointmentMutationBody = Appointment;
export type PutAppointmentMutationError = AxiosError<unknown>;

export const usePutAppointment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putAppointment>>,
        TError,
        { id: number; data: Appointment },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putAppointment>>,
    TError,
    { id: number; data: Appointment },
    TContext
> => {
    const mutationOptions = getPutAppointmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteAppointment = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Appointments/${id}`, options);
};

export const getDeleteAppointmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteAppointment>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteAppointment>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAppointment>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteAppointment(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteAppointmentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAppointment>>>;

export type DeleteAppointmentMutationError = AxiosError<unknown>;

export const useDeleteAppointment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteAppointment>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteAppointment>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteAppointmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getAppointmentsByDoctorAndDate = (
    doctorId: number,
    appointmentDate: string,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Appointment[]>> => {
    return axios.default.get(`/api/Appointments/doctor/${doctorId}/date/${appointmentDate}`, options);
};

export const getGetAppointmentsByDoctorAndDateQueryKey = (doctorId: number, appointmentDate: string) => {
    return [`/api/Appointments/doctor/${doctorId}/date/${appointmentDate}`] as const;
};

export const getGetAppointmentsByDoctorAndDateQueryOptions = <
    TData = Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetAppointmentsByDoctorAndDateQueryKey(doctorId, appointmentDate);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>> = ({ signal }) =>
        getAppointmentsByDoctorAndDate(doctorId, appointmentDate, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!(doctorId && appointmentDate), ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetAppointmentsByDoctorAndDateQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>
>;
export type GetAppointmentsByDoctorAndDateQueryError = AxiosError<unknown>;

export function useGetAppointmentsByDoctorAndDate<
    TData = Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointmentsByDoctorAndDate<
    TData = Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointmentsByDoctorAndDate<
    TData = Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAppointmentsByDoctorAndDate<
    TData = Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    appointmentDate: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppointmentsByDoctorAndDate>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetAppointmentsByDoctorAndDateQueryOptions(doctorId, appointmentDate, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getDepartments = (
    params?: GetDepartmentsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DepartmentDTOPaginated>> => {
    return axios.default.get(`/api/Departments`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetDepartmentsQueryKey = (params?: GetDepartmentsParams) => {
    return [`/api/Departments`, ...(params ? [params] : [])] as const;
};

export const getGetDepartmentsQueryOptions = <
    TData = Awaited<ReturnType<typeof getDepartments>>,
    TError = AxiosError<unknown>,
>(
    params?: GetDepartmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDepartmentsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDepartments>>> = ({ signal }) =>
        getDepartments(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDepartments>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDepartmentsQueryResult = NonNullable<Awaited<ReturnType<typeof getDepartments>>>;
export type GetDepartmentsQueryError = AxiosError<unknown>;

export function useGetDepartments<TData = Awaited<ReturnType<typeof getDepartments>>, TError = AxiosError<unknown>>(
    params: undefined | GetDepartmentsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDepartments<TData = Awaited<ReturnType<typeof getDepartments>>, TError = AxiosError<unknown>>(
    params?: GetDepartmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDepartments<TData = Awaited<ReturnType<typeof getDepartments>>, TError = AxiosError<unknown>>(
    params?: GetDepartmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDepartments<TData = Awaited<ReturnType<typeof getDepartments>>, TError = AxiosError<unknown>>(
    params?: GetDepartmentsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartments>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDepartmentsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postDepartment = (
    department: Department,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Department>> => {
    return axios.default.post(`/api/Departments`, department, options);
};

export const getPostDepartmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDepartment>>, TError, { data: Department }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postDepartment>>, TError, { data: Department }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDepartment>>, { data: Department }> = (props) => {
        const { data } = props ?? {};

        return postDepartment(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostDepartmentMutationResult = NonNullable<Awaited<ReturnType<typeof postDepartment>>>;
export type PostDepartmentMutationBody = Department;
export type PostDepartmentMutationError = AxiosError<unknown>;

export const usePostDepartment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDepartment>>, TError, { data: Department }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postDepartment>>, TError, { data: Department }, TContext> => {
    const mutationOptions = getPostDepartmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDepartment = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Department>> => {
    return axios.default.get(`/api/Departments/${id}`, options);
};

export const getGetDepartmentQueryKey = (id: number) => {
    return [`/api/Departments/${id}`] as const;
};

export const getGetDepartmentQueryOptions = <
    TData = Awaited<ReturnType<typeof getDepartment>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDepartmentQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDepartment>>> = ({ signal }) =>
        getDepartment(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDepartment>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDepartmentQueryResult = NonNullable<Awaited<ReturnType<typeof getDepartment>>>;
export type GetDepartmentQueryError = AxiosError<unknown>;

export function useGetDepartment<TData = Awaited<ReturnType<typeof getDepartment>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDepartment<TData = Awaited<ReturnType<typeof getDepartment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDepartment<TData = Awaited<ReturnType<typeof getDepartment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDepartment<TData = Awaited<ReturnType<typeof getDepartment>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDepartment>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDepartmentQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putDepartment = (
    id: number,
    department: Department,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Departments/${id}`, department, options);
};

export const getPutDepartmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDepartment>>,
        TError,
        { id: number; data: Department },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putDepartment>>,
    TError,
    { id: number; data: Department },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDepartment>>, { id: number; data: Department }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putDepartment(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutDepartmentMutationResult = NonNullable<Awaited<ReturnType<typeof putDepartment>>>;
export type PutDepartmentMutationBody = Department;
export type PutDepartmentMutationError = AxiosError<unknown>;

export const usePutDepartment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDepartment>>,
        TError,
        { id: number; data: Department },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putDepartment>>,
    TError,
    { id: number; data: Department },
    TContext
> => {
    const mutationOptions = getPutDepartmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteDepartment = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Departments/${id}`, options);
};

export const getDeleteDepartmentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDepartment>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteDepartment>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDepartment>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteDepartment(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteDepartmentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDepartment>>>;

export type DeleteDepartmentMutationError = AxiosError<unknown>;

export const useDeleteDepartment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDepartment>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteDepartment>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteDepartmentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDiagnoses = (options?: AxiosRequestConfig): Promise<AxiosResponse<Diagnosis[]>> => {
    return axios.default.get(`/api/Diagnoses`, options);
};

export const getGetDiagnosesQueryKey = () => {
    return [`/api/Diagnoses`] as const;
};

export const getGetDiagnosesQueryOptions = <
    TData = Awaited<ReturnType<typeof getDiagnoses>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDiagnosesQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDiagnoses>>> = ({ signal }) =>
        getDiagnoses({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDiagnoses>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDiagnosesQueryResult = NonNullable<Awaited<ReturnType<typeof getDiagnoses>>>;
export type GetDiagnosesQueryError = AxiosError<unknown>;

export function useGetDiagnoses<
    TData = Awaited<ReturnType<typeof getDiagnoses>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDiagnoses<
    TData = Awaited<ReturnType<typeof getDiagnoses>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDiagnoses<
    TData = Awaited<ReturnType<typeof getDiagnoses>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDiagnoses<
    TData = Awaited<ReturnType<typeof getDiagnoses>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnoses>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDiagnosesQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postDiagnosis = (
    diagnosis: Diagnosis,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Diagnosis>> => {
    return axios.default.post(`/api/Diagnoses`, diagnosis, options);
};

export const getPostDiagnosisMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDiagnosis>>, TError, { data: Diagnosis }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postDiagnosis>>, TError, { data: Diagnosis }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDiagnosis>>, { data: Diagnosis }> = (props) => {
        const { data } = props ?? {};

        return postDiagnosis(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostDiagnosisMutationResult = NonNullable<Awaited<ReturnType<typeof postDiagnosis>>>;
export type PostDiagnosisMutationBody = Diagnosis;
export type PostDiagnosisMutationError = AxiosError<unknown>;

export const usePostDiagnosis = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDiagnosis>>, TError, { data: Diagnosis }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postDiagnosis>>, TError, { data: Diagnosis }, TContext> => {
    const mutationOptions = getPostDiagnosisMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDiagnosis = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Diagnosis>> => {
    return axios.default.get(`/api/Diagnoses/${id}`, options);
};

export const getGetDiagnosisQueryKey = (id: number) => {
    return [`/api/Diagnoses/${id}`] as const;
};

export const getGetDiagnosisQueryOptions = <
    TData = Awaited<ReturnType<typeof getDiagnosis>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDiagnosisQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDiagnosis>>> = ({ signal }) =>
        getDiagnosis(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDiagnosis>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDiagnosisQueryResult = NonNullable<Awaited<ReturnType<typeof getDiagnosis>>>;
export type GetDiagnosisQueryError = AxiosError<unknown>;

export function useGetDiagnosis<TData = Awaited<ReturnType<typeof getDiagnosis>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDiagnosis<TData = Awaited<ReturnType<typeof getDiagnosis>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDiagnosis<TData = Awaited<ReturnType<typeof getDiagnosis>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDiagnosis<TData = Awaited<ReturnType<typeof getDiagnosis>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagnosis>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDiagnosisQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putDiagnosis = (
    id: number,
    diagnosis: Diagnosis,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Diagnoses/${id}`, diagnosis, options);
};

export const getPutDiagnosisMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDiagnosis>>,
        TError,
        { id: number; data: Diagnosis },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof putDiagnosis>>, TError, { id: number; data: Diagnosis }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDiagnosis>>, { id: number; data: Diagnosis }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putDiagnosis(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutDiagnosisMutationResult = NonNullable<Awaited<ReturnType<typeof putDiagnosis>>>;
export type PutDiagnosisMutationBody = Diagnosis;
export type PutDiagnosisMutationError = AxiosError<unknown>;

export const usePutDiagnosis = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDiagnosis>>,
        TError,
        { id: number; data: Diagnosis },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof putDiagnosis>>, TError, { id: number; data: Diagnosis }, TContext> => {
    const mutationOptions = getPutDiagnosisMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteDiagnosis = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Diagnoses/${id}`, options);
};

export const getDeleteDiagnosisMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDiagnosis>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteDiagnosis>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDiagnosis>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteDiagnosis(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteDiagnosisMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDiagnosis>>>;

export type DeleteDiagnosisMutationError = AxiosError<unknown>;

export const useDeleteDiagnosis = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDiagnosis>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteDiagnosis>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteDiagnosisMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDoctors = (
    params?: GetDoctorsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorDTOPaginated>> => {
    return axios.default.get(`/api/Doctors`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetDoctorsQueryKey = (params?: GetDoctorsParams) => {
    return [`/api/Doctors`, ...(params ? [params] : [])] as const;
};

export const getGetDoctorsQueryOptions = <TData = Awaited<ReturnType<typeof getDoctors>>, TError = AxiosError<unknown>>(
    params?: GetDoctorsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDoctorsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDoctors>>> = ({ signal }) =>
        getDoctors(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDoctors>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDoctorsQueryResult = NonNullable<Awaited<ReturnType<typeof getDoctors>>>;
export type GetDoctorsQueryError = AxiosError<unknown>;

export function useGetDoctors<TData = Awaited<ReturnType<typeof getDoctors>>, TError = AxiosError<unknown>>(
    params: undefined | GetDoctorsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctors<TData = Awaited<ReturnType<typeof getDoctors>>, TError = AxiosError<unknown>>(
    params?: GetDoctorsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctors<TData = Awaited<ReturnType<typeof getDoctors>>, TError = AxiosError<unknown>>(
    params?: GetDoctorsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDoctors<TData = Awaited<ReturnType<typeof getDoctors>>, TError = AxiosError<unknown>>(
    params?: GetDoctorsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctors>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDoctorsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postDoctor = (doctor: Doctor, options?: AxiosRequestConfig): Promise<AxiosResponse<Doctor>> => {
    return axios.default.post(`/api/Doctors`, doctor, options);
};

export const getPostDoctorMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDoctor>>, TError, { data: Doctor }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postDoctor>>, TError, { data: Doctor }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDoctor>>, { data: Doctor }> = (props) => {
        const { data } = props ?? {};

        return postDoctor(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostDoctorMutationResult = NonNullable<Awaited<ReturnType<typeof postDoctor>>>;
export type PostDoctorMutationBody = Doctor;
export type PostDoctorMutationError = AxiosError<unknown>;

export const usePostDoctor = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDoctor>>, TError, { data: Doctor }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postDoctor>>, TError, { data: Doctor }, TContext> => {
    const mutationOptions = getPostDoctorMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDoctor = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DoctorDTO>> => {
    return axios.default.get(`/api/Doctors/${id}`, options);
};

export const getGetDoctorQueryKey = (id: number) => {
    return [`/api/Doctors/${id}`] as const;
};

export const getGetDoctorQueryOptions = <TData = Awaited<ReturnType<typeof getDoctor>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDoctorQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDoctor>>> = ({ signal }) =>
        getDoctor(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDoctor>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDoctorQueryResult = NonNullable<Awaited<ReturnType<typeof getDoctor>>>;
export type GetDoctorQueryError = AxiosError<unknown>;

export function useGetDoctor<TData = Awaited<ReturnType<typeof getDoctor>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctor<TData = Awaited<ReturnType<typeof getDoctor>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctor<TData = Awaited<ReturnType<typeof getDoctor>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDoctor<TData = Awaited<ReturnType<typeof getDoctor>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctor>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDoctorQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putDoctor = (id: number, doctor: Doctor, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Doctors/${id}`, doctor, options);
};

export const getPutDoctorMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDoctor>>,
        TError,
        { id: number; data: Doctor },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof putDoctor>>, TError, { id: number; data: Doctor }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDoctor>>, { id: number; data: Doctor }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putDoctor(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutDoctorMutationResult = NonNullable<Awaited<ReturnType<typeof putDoctor>>>;
export type PutDoctorMutationBody = Doctor;
export type PutDoctorMutationError = AxiosError<unknown>;

export const usePutDoctor = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDoctor>>,
        TError,
        { id: number; data: Doctor },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof putDoctor>>, TError, { id: number; data: Doctor }, TContext> => {
    const mutationOptions = getPutDoctorMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteDoctor = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Doctors/${id}`, options);
};

export const getDeleteDoctorMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDoctor>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteDoctor>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDoctor>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteDoctor(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteDoctorMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDoctor>>>;

export type DeleteDoctorMutationError = AxiosError<unknown>;

export const useDeleteDoctor = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDoctor>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteDoctor>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteDoctorMutationOptions(options);

    return useMutation(mutationOptions);
};

export const doctorsRegister = (
    doctorRegistration: DoctorRegistration,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.post(`/api/Doctors/doctorregister`, doctorRegistration, options);
};

export const getDoctorsRegisterMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof doctorsRegister>>,
        TError,
        { data: DoctorRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof doctorsRegister>>, TError, { data: DoctorRegistration }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof doctorsRegister>>, { data: DoctorRegistration }> = (
        props
    ) => {
        const { data } = props ?? {};

        return doctorsRegister(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DoctorsRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof doctorsRegister>>>;
export type DoctorsRegisterMutationBody = DoctorRegistration;
export type DoctorsRegisterMutationError = AxiosError<unknown>;

export const useDoctorsRegister = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof doctorsRegister>>,
        TError,
        { data: DoctorRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof doctorsRegister>>, TError, { data: DoctorRegistration }, TContext> => {
    const mutationOptions = getDoctorsRegisterMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDoctorSchedules = (
    doctorId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorSchedule[]>> => {
    return axios.default.get(`/api/DoctorSchedules/doctor-schedule/${doctorId}`, options);
};

export const getGetDoctorSchedulesQueryKey = (doctorId: number) => {
    return [`/api/DoctorSchedules/doctor-schedule/${doctorId}`] as const;
};

export const getGetDoctorSchedulesQueryOptions = <
    TData = Awaited<ReturnType<typeof getDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDoctorSchedulesQueryKey(doctorId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDoctorSchedules>>> = ({ signal }) =>
        getDoctorSchedules(doctorId, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!doctorId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDoctorSchedules>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDoctorSchedulesQueryResult = NonNullable<Awaited<ReturnType<typeof getDoctorSchedules>>>;
export type GetDoctorSchedulesQueryError = AxiosError<unknown>;

export function useGetDoctorSchedules<
    TData = Awaited<ReturnType<typeof getDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctorSchedules<
    TData = Awaited<ReturnType<typeof getDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctorSchedules<
    TData = Awaited<ReturnType<typeof getDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDoctorSchedules<
    TData = Awaited<ReturnType<typeof getDoctorSchedules>>,
    TError = AxiosError<unknown>,
>(
    doctorId: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedules>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDoctorSchedulesQueryOptions(doctorId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postDoctorSchedule = (
    doctorSchedule: DoctorSchedule,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DoctorSchedule>> => {
    return axios.default.post(`/api/DoctorSchedules`, doctorSchedule, options);
};

export const getPostDoctorScheduleMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postDoctorSchedule>>,
        TError,
        { data: DoctorSchedule },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postDoctorSchedule>>, TError, { data: DoctorSchedule }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDoctorSchedule>>, { data: DoctorSchedule }> = (
        props
    ) => {
        const { data } = props ?? {};

        return postDoctorSchedule(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostDoctorScheduleMutationResult = NonNullable<Awaited<ReturnType<typeof postDoctorSchedule>>>;
export type PostDoctorScheduleMutationBody = DoctorSchedule;
export type PostDoctorScheduleMutationError = AxiosError<unknown>;

export const usePostDoctorSchedule = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postDoctorSchedule>>,
        TError,
        { data: DoctorSchedule },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postDoctorSchedule>>, TError, { data: DoctorSchedule }, TContext> => {
    const mutationOptions = getPostDoctorScheduleMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getDoctorSchedule = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DoctorSchedule>> => {
    return axios.default.get(`/api/DoctorSchedules/${id}`, options);
};

export const getGetDoctorScheduleQueryKey = (id: number) => {
    return [`/api/DoctorSchedules/${id}`] as const;
};

export const getGetDoctorScheduleQueryOptions = <
    TData = Awaited<ReturnType<typeof getDoctorSchedule>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDoctorScheduleQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDoctorSchedule>>> = ({ signal }) =>
        getDoctorSchedule(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDoctorSchedule>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDoctorScheduleQueryResult = NonNullable<Awaited<ReturnType<typeof getDoctorSchedule>>>;
export type GetDoctorScheduleQueryError = AxiosError<unknown>;

export function useGetDoctorSchedule<
    TData = Awaited<ReturnType<typeof getDoctorSchedule>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctorSchedule<
    TData = Awaited<ReturnType<typeof getDoctorSchedule>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDoctorSchedule<
    TData = Awaited<ReturnType<typeof getDoctorSchedule>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDoctorSchedule<
    TData = Awaited<ReturnType<typeof getDoctorSchedule>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorSchedule>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDoctorScheduleQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putDoctorSchedule = (
    id: number,
    doctorSchedule: DoctorSchedule,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/DoctorSchedules/${id}`, doctorSchedule, options);
};

export const getPutDoctorScheduleMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDoctorSchedule>>,
        TError,
        { id: number; data: DoctorSchedule },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putDoctorSchedule>>,
    TError,
    { id: number; data: DoctorSchedule },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putDoctorSchedule>>,
        { id: number; data: DoctorSchedule }
    > = (props) => {
        const { id, data } = props ?? {};

        return putDoctorSchedule(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutDoctorScheduleMutationResult = NonNullable<Awaited<ReturnType<typeof putDoctorSchedule>>>;
export type PutDoctorScheduleMutationBody = DoctorSchedule;
export type PutDoctorScheduleMutationError = AxiosError<unknown>;

export const usePutDoctorSchedule = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putDoctorSchedule>>,
        TError,
        { id: number; data: DoctorSchedule },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putDoctorSchedule>>,
    TError,
    { id: number; data: DoctorSchedule },
    TContext
> => {
    const mutationOptions = getPutDoctorScheduleMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteDoctorSchedule = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/DoctorSchedules/${id}`, options);
};

export const getDeleteDoctorScheduleMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDoctorSchedule>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteDoctorSchedule>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDoctorSchedule>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteDoctorSchedule(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteDoctorScheduleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDoctorSchedule>>>;

export type DeleteDoctorScheduleMutationError = AxiosError<unknown>;

export const useDeleteDoctorSchedule = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteDoctorSchedule>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteDoctorSchedule>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteDoctorScheduleMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getEmergencyContacts = (options?: AxiosRequestConfig): Promise<AxiosResponse<EmergencyContact[]>> => {
    return axios.default.get(`/api/EmergencyContacts`, options);
};

export const getGetEmergencyContactsQueryKey = () => {
    return [`/api/EmergencyContacts`] as const;
};

export const getGetEmergencyContactsQueryOptions = <
    TData = Awaited<ReturnType<typeof getEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetEmergencyContactsQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmergencyContacts>>> = ({ signal }) =>
        getEmergencyContacts({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getEmergencyContacts>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetEmergencyContactsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmergencyContacts>>>;
export type GetEmergencyContactsQueryError = AxiosError<unknown>;

export function useGetEmergencyContacts<
    TData = Awaited<ReturnType<typeof getEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEmergencyContacts<
    TData = Awaited<ReturnType<typeof getEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>,
            'initialData'
        >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEmergencyContacts<
    TData = Awaited<ReturnType<typeof getEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetEmergencyContacts<
    TData = Awaited<ReturnType<typeof getEmergencyContacts>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContacts>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetEmergencyContactsQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postEmergencyContact = (
    emergencyContact: EmergencyContact,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<EmergencyContact>> => {
    return axios.default.post(`/api/EmergencyContacts`, emergencyContact, options);
};

export const getPostEmergencyContactMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postEmergencyContact>>,
        TError,
        { data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postEmergencyContact>>,
    TError,
    { data: EmergencyContact },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmergencyContact>>, { data: EmergencyContact }> = (
        props
    ) => {
        const { data } = props ?? {};

        return postEmergencyContact(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostEmergencyContactMutationResult = NonNullable<Awaited<ReturnType<typeof postEmergencyContact>>>;
export type PostEmergencyContactMutationBody = EmergencyContact;
export type PostEmergencyContactMutationError = AxiosError<unknown>;

export const usePostEmergencyContact = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postEmergencyContact>>,
        TError,
        { data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof postEmergencyContact>>,
    TError,
    { data: EmergencyContact },
    TContext
> => {
    const mutationOptions = getPostEmergencyContactMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getEmergencyContact = (
    id: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<EmergencyContact>> => {
    return axios.default.get(`/api/EmergencyContacts/${id}`, options);
};

export const getGetEmergencyContactQueryKey = (id: number) => {
    return [`/api/EmergencyContacts/${id}`] as const;
};

export const getGetEmergencyContactQueryOptions = <
    TData = Awaited<ReturnType<typeof getEmergencyContact>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetEmergencyContactQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmergencyContact>>> = ({ signal }) =>
        getEmergencyContact(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getEmergencyContact>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetEmergencyContactQueryResult = NonNullable<Awaited<ReturnType<typeof getEmergencyContact>>>;
export type GetEmergencyContactQueryError = AxiosError<unknown>;

export function useGetEmergencyContact<
    TData = Awaited<ReturnType<typeof getEmergencyContact>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEmergencyContact<
    TData = Awaited<ReturnType<typeof getEmergencyContact>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>,
                'initialData'
            >;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetEmergencyContact<
    TData = Awaited<ReturnType<typeof getEmergencyContact>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetEmergencyContact<
    TData = Awaited<ReturnType<typeof getEmergencyContact>>,
    TError = AxiosError<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmergencyContact>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetEmergencyContactQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putEmergencyContact = (
    id: number,
    emergencyContact: EmergencyContact,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/EmergencyContacts/${id}`, emergencyContact, options);
};

export const getPutEmergencyContactMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putEmergencyContact>>,
        TError,
        { id: number; data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putEmergencyContact>>,
    TError,
    { id: number; data: EmergencyContact },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putEmergencyContact>>,
        { id: number; data: EmergencyContact }
    > = (props) => {
        const { id, data } = props ?? {};

        return putEmergencyContact(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutEmergencyContactMutationResult = NonNullable<Awaited<ReturnType<typeof putEmergencyContact>>>;
export type PutEmergencyContactMutationBody = EmergencyContact;
export type PutEmergencyContactMutationError = AxiosError<unknown>;

export const usePutEmergencyContact = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putEmergencyContact>>,
        TError,
        { id: number; data: EmergencyContact },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof putEmergencyContact>>,
    TError,
    { id: number; data: EmergencyContact },
    TContext
> => {
    const mutationOptions = getPutEmergencyContactMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteEmergencyContact = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/EmergencyContacts/${id}`, options);
};

export const getDeleteEmergencyContactMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEmergencyContact>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteEmergencyContact>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmergencyContact>>, { id: number }> = (
        props
    ) => {
        const { id } = props ?? {};

        return deleteEmergencyContact(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteEmergencyContactMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmergencyContact>>>;

export type DeleteEmergencyContactMutationError = AxiosError<unknown>;

export const useDeleteEmergencyContact = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEmergencyContact>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteEmergencyContact>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteEmergencyContactMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getInvoices = (options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice[]>> => {
    return axios.default.get(`/api/Invoices`, options);
};

export const getGetInvoicesQueryKey = () => {
    return [`/api/Invoices`] as const;
};

export const getGetInvoicesQueryOptions = <
    TData = Awaited<ReturnType<typeof getInvoices>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetInvoicesQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInvoices>>> = ({ signal }) =>
        getInvoices({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getInvoices>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetInvoicesQueryResult = NonNullable<Awaited<ReturnType<typeof getInvoices>>>;
export type GetInvoicesQueryError = AxiosError<unknown>;

export function useGetInvoices<TData = Awaited<ReturnType<typeof getInvoices>>, TError = AxiosError<unknown>>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetInvoices<
    TData = Awaited<ReturnType<typeof getInvoices>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetInvoices<
    TData = Awaited<ReturnType<typeof getInvoices>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetInvoices<
    TData = Awaited<ReturnType<typeof getInvoices>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoices>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetInvoicesQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postInvoice = (invoice: Invoice, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> => {
    return axios.default.post(`/api/Invoices`, invoice, options);
};

export const getPostInvoiceMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postInvoice>>, TError, { data: Invoice }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postInvoice>>, TError, { data: Invoice }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postInvoice>>, { data: Invoice }> = (props) => {
        const { data } = props ?? {};

        return postInvoice(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostInvoiceMutationResult = NonNullable<Awaited<ReturnType<typeof postInvoice>>>;
export type PostInvoiceMutationBody = Invoice;
export type PostInvoiceMutationError = AxiosError<unknown>;

export const usePostInvoice = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postInvoice>>, TError, { data: Invoice }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postInvoice>>, TError, { data: Invoice }, TContext> => {
    const mutationOptions = getPostInvoiceMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getInvoice = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> => {
    return axios.default.get(`/api/Invoices/${id}`, options);
};

export const getGetInvoiceQueryKey = (id: number) => {
    return [`/api/Invoices/${id}`] as const;
};

export const getGetInvoiceQueryOptions = <TData = Awaited<ReturnType<typeof getInvoice>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetInvoiceQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInvoice>>> = ({ signal }) =>
        getInvoice(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getInvoice>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetInvoiceQueryResult = NonNullable<Awaited<ReturnType<typeof getInvoice>>>;
export type GetInvoiceQueryError = AxiosError<unknown>;

export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetInvoiceQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putInvoice = (
    id: number,
    invoice: Invoice,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Invoices/${id}`, invoice, options);
};

export const getPutInvoiceMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putInvoice>>,
        TError,
        { id: number; data: Invoice },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof putInvoice>>, TError, { id: number; data: Invoice }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putInvoice>>, { id: number; data: Invoice }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putInvoice(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutInvoiceMutationResult = NonNullable<Awaited<ReturnType<typeof putInvoice>>>;
export type PutInvoiceMutationBody = Invoice;
export type PutInvoiceMutationError = AxiosError<unknown>;

export const usePutInvoice = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putInvoice>>,
        TError,
        { id: number; data: Invoice },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof putInvoice>>, TError, { id: number; data: Invoice }, TContext> => {
    const mutationOptions = getPutInvoiceMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteInvoice = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Invoices/${id}`, options);
};

export const getDeleteInvoiceMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteInvoice>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteInvoice>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteInvoice>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteInvoice(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteInvoiceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteInvoice>>>;

export type DeleteInvoiceMutationError = AxiosError<unknown>;

export const useDeleteInvoice = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteInvoice>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteInvoice>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeleteInvoiceMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getPatients = (options?: AxiosRequestConfig): Promise<AxiosResponse<Patient[]>> => {
    return axios.default.get(`/api/Patients`, options);
};

export const getGetPatientsQueryKey = () => {
    return [`/api/Patients`] as const;
};

export const getGetPatientsQueryOptions = <
    TData = Awaited<ReturnType<typeof getPatients>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetPatientsQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPatients>>> = ({ signal }) =>
        getPatients({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getPatients>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetPatientsQueryResult = NonNullable<Awaited<ReturnType<typeof getPatients>>>;
export type GetPatientsQueryError = AxiosError<unknown>;

export function useGetPatients<TData = Awaited<ReturnType<typeof getPatients>>, TError = AxiosError<unknown>>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPatients<
    TData = Awaited<ReturnType<typeof getPatients>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPatients<
    TData = Awaited<ReturnType<typeof getPatients>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPatients<
    TData = Awaited<ReturnType<typeof getPatients>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatients>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetPatientsQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postPatient = (patient: Patient, options?: AxiosRequestConfig): Promise<AxiosResponse<Patient>> => {
    return axios.default.post(`/api/Patients`, patient, options);
};

export const getPostPatientMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postPatient>>, TError, { data: Patient }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postPatient>>, TError, { data: Patient }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPatient>>, { data: Patient }> = (props) => {
        const { data } = props ?? {};

        return postPatient(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostPatientMutationResult = NonNullable<Awaited<ReturnType<typeof postPatient>>>;
export type PostPatientMutationBody = Patient;
export type PostPatientMutationError = AxiosError<unknown>;

export const usePostPatient = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postPatient>>, TError, { data: Patient }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postPatient>>, TError, { data: Patient }, TContext> => {
    const mutationOptions = getPostPatientMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getPatient = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Patient>> => {
    return axios.default.get(`/api/Patients/${id}`, options);
};

export const getGetPatientQueryKey = (id: number) => {
    return [`/api/Patients/${id}`] as const;
};

export const getGetPatientQueryOptions = <TData = Awaited<ReturnType<typeof getPatient>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetPatientQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPatient>>> = ({ signal }) =>
        getPatient(id, { signal, ...axiosOptions });

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getPatient>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetPatientQueryResult = NonNullable<Awaited<ReturnType<typeof getPatient>>>;
export type GetPatientQueryError = AxiosError<unknown>;

export function useGetPatient<TData = Awaited<ReturnType<typeof getPatient>>, TError = AxiosError<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPatient<TData = Awaited<ReturnType<typeof getPatient>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>, 'initialData'>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPatient<TData = Awaited<ReturnType<typeof getPatient>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPatient<TData = Awaited<ReturnType<typeof getPatient>>, TError = AxiosError<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatient>>, TError, TData>>;
        axios?: AxiosRequestConfig;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetPatientQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const putPatient = (
    id: number,
    patient: Patient,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.put(`/api/Patients/${id}`, patient, options);
};

export const getPutPatientMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putPatient>>,
        TError,
        { id: number; data: Patient },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof putPatient>>, TError, { id: number; data: Patient }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof putPatient>>, { id: number; data: Patient }> = (
        props
    ) => {
        const { id, data } = props ?? {};

        return putPatient(id, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutPatientMutationResult = NonNullable<Awaited<ReturnType<typeof putPatient>>>;
export type PutPatientMutationBody = Patient;
export type PutPatientMutationError = AxiosError<unknown>;

export const usePutPatient = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putPatient>>,
        TError,
        { id: number; data: Patient },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof putPatient>>, TError, { id: number; data: Patient }, TContext> => {
    const mutationOptions = getPutPatientMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deletePatient = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return axios.default.delete(`/api/Patients/${id}`, options);
};

export const getDeletePatientMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deletePatient>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deletePatient>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePatient>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deletePatient(id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeletePatientMutationResult = NonNullable<Awaited<ReturnType<typeof deletePatient>>>;

export type DeletePatientMutationError = AxiosError<unknown>;

export const useDeletePatient = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deletePatient>>, TError, { id: number }, TContext>;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deletePatient>>, TError, { id: number }, TContext> => {
    const mutationOptions = getDeletePatientMutationOptions(options);

    return useMutation(mutationOptions);
};

export const patientRegister = (
    patientRegistration: PatientRegistration,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.default.post(`/api/Patients/patientregister`, patientRegistration, options);
};

export const getPatientRegisterMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patientRegister>>,
        TError,
        { data: PatientRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof patientRegister>>,
    TError,
    { data: PatientRegistration },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof patientRegister>>, { data: PatientRegistration }> = (
        props
    ) => {
        const { data } = props ?? {};

        return patientRegister(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PatientRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof patientRegister>>>;
export type PatientRegisterMutationBody = PatientRegistration;
export type PatientRegisterMutationError = AxiosError<unknown>;

export const usePatientRegister = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patientRegister>>,
        TError,
        { data: PatientRegistration },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof patientRegister>>, TError, { data: PatientRegistration }, TContext> => {
    const mutationOptions = getPatientRegisterMutationOptions(options);

    return useMutation(mutationOptions);
};

export const get = (options?: AxiosRequestConfig): Promise<AxiosResponse<WeatherForecast[]>> => {
    return axios.default.get(`/WeatherForecast`, options);
};

export const getGetQueryKey = () => {
    return [`/WeatherForecast`] as const;
};

export const getGetQueryOptions = <TData = Awaited<ReturnType<typeof get>>, TError = AxiosError<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({ signal }) => get({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData> & {
        queryKey: QueryKey;
    };
};

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>;
export type GetQueryError = AxiosError<unknown>;

export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = AxiosError<unknown>>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof get>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = AxiosError<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof get>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = AxiosError<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = AxiosError<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
